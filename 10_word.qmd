# 자료형 {#sec-data-type}

## 표준 자료형

파이썬에서 내장된 표준 **자료형**(Data type)은 아래 그림과 같다.

```{mermaid}
flowchart TD

10[Numeric]
20[Dictionary]
30[Boolean]  
40[Set]
50[Sequence Type]

11[Integer]
12[Float]
13[Complex]

51[String]
52[List]
53[Tuple]

00[Python Data Types] --- 10
00 --- 20
00 --- 30
00 --- 40
00 --- 50
10 ----- 11 & 12 & 13
50 ----- 51 & 52 & 53
```

### 숫자형

숫자형 자료형은 다음과 같다.

-   정수형(int): -1, 0, 1024, ...
-   실수형(float): 3.14, 2.1828, ...
-   복소수형(complex), 1.23, -4.5j, 1.23+4.5j, ...

#### 정수형

```{python}
#| error: true
int(0)
```

```{python}
#| error: true
int(1.23)
```

```{python}
#| error: true
int(1.23+4.5j)
```

#### 실수형

```{python}
#| error: true
float(0)
```

```{python}
#| error: true
float(1.23)
```

```{python}
#| error: true
float(1.23+4.5j)
```

#### 복소수형

```{python}
#| error: true
complex(0)
```

```{python}
#| error: true
complex(1.23)
```

```{python}
#| error: true
complex(1.23+4.5j)
```

```{python}
#| error: true
complex(1, 4.5)
```

### 논리형

**논리형**(Boolean type) 자료형은 참과 거짓을 나타낸다. 참인 경우 `True`, 거짓인 경우 `False`로 표기한다. 논리값 검사 결과를 저장하기 위해 사용한다.

```{python}
1 != 2
```

```{python}
1 == 2
```

### 시퀀스형

**시퀀스형**(Sequence Type)은 연속된 값을 표현하기 위해 사용한다. 기본 형태로 `list`, `tuple`, `range` 자료형이 있다.

#### 리스트

**리스트**(list)는 가변 시퀀스로 일반적으로동질 항목 모음을 저장하는데 사용한다.

``` python
class list([iterable])
```

리스트를 생성하는 방식은 다음과 같다.

-   대괄호를 사용하여 빈 리스트를 표시: `[ ]`
-   대괄호를 사용하여 쉼표로 항목 구분: `[a]`, `[a, b, c]`
-   리스트 컴프리헨션(Comprehension, 문법): `[x for x in iterable]`
-   생성자를 사용하기: `list()`, `list(iterable)`

```{python}
list("abc")
```

```{python}
list((1,2,3))
```

```{python}
[x for x in "abc"]
```

#### 튜플

**튜플**(tuple)은 불편 시퀀스로 이질적 또는 동질적 데이터 모음을 저장하는 데 사용된다.

``` python
class tuple([iterable])
```

튜플을 생성하는 방식은 다음과 같다.

-   괄호를 사용하여 빈 리스트를 표시: `( )`
-   단일 항목 튜플을 쉼표로 항목 구분: `a,`, `(a,)`
-   항목을 쉼표로 구분하기: `a,b,c`, `(a,b,c)`
-   생성자를 사용하기: `tuple()`, `tuple(iterable)`

```{python}
tuple("abc")
```

```{python}
tuple((1,2,3))
```

```{python}
tuple([1,2,3])
```

```{python}
#| error: true
tuple(1,2,3)
```

`tuple()` 함수는 인자를 하나만 갖는다. 위 예제에서는 튜플 3개를 인자로 넘겨 에러가 발생하였다.

#### range

**range**는 숫자 불변 시퀀스를 나타내며 `for` 반복문에서 특정 횟수만큼 반복하는 데 흔히 사용된다.

``` python
class range(stop)
class range(start, stop[, step])
```

인자

:   -   start: 시작 위치 (값을 지정하지 않으면 기본값 `0`을 가짐)
    -   end: 종료 위치
    -   step: 간격 (값을 지정하지 않으면 기본값 `1`을 가짐)

`stop` 인자만 갖는 경우 0부터 `stop - 1`까지 연속된 정수를 생성한다. `start`와 `stop`이 있는 경우 $start \le r < (end-1)$ 범위를 갖는 정수를 생성한다.

`step` 인자가 포함된 경우 다음과 같이 계산된다.

-   양수 `step`인 경우, $r[i] = start + step \times i, \quad i \ge 0, r[i] > stop$
-   음수 `step`인 경우, $r[i] = start + step \times i, \quad i \le 0, r[i] > stop$

```{python}
list(range(10))
```

```{python}
list(range(1,11))
```

```{python}
list(range(0, 10, 3))
```

```{python}
list(range(0, -10, -1))
```

```{python}
list(range(0))
```

```{python}
list(range(0, 2, -1))
```

#### 문자열

파이썬에선 문자열 처리를 `str` 또는 문자열(string), 객체를 사용하여 처리한다. 문자열은 유니코드 불변 시퀀스이다. 문자열 리터럴은 다은과 같은 방법으로 작성된다.

-   작은 따옴표: '문자열'
-   큰 따옴표: "문자열"
-   삼중 따옴표: '''문자열''', """문자열"""

작은 따옴표 안에 큰 따옴표를, 큰 따옴표 안에 작은 따옴표를 사용할 수 있다. 또흔 삼중 따옴표는 여러 줄에 걸쳐 작성이 가능하다.

```{python}
'"큰" 따옴표를 담을 수 있다.'
```

```{python}
"'작운' 따옴표를 담을 수 있다."
```

```{python}
'''삼중 따옴표를 사용할 경우,
    여러 줄에 걸쳐 문자열을
작성할 수 있다.
'''
```

`str()` 생성자를 통해 문자열을 만들 수도 있다.

``` python
class str(object='')
class str(object=b'', encoding='utf-8', errors='strict')
```

```{python}
str('삼성')
```

```{python}
#| error: true
str = str("samsung")
str = str("apple")
```

`str()` 함수에 'samsung' 문자열을 덮어 써서 정상적으로 동작하지 않는 것이다. 이런 경우 `del str` 명령을 실행하거나 `jupyter notebook`을 재실행한다.

### 집합형

집합형으로는 `set`과 `frozenset`이 있으며, 데이터를 중복 및 순서없이 모아 저장하기 위해 사용한다. 합집합, 교집합, 차집합 등 수학적 연산을 지원한다.

```python
class set([iterable])
class frozenset([iterable)]
```

집합을 생성하는 방법은 다음과 같다.

- 중괄호 안에 쉽표로 구분하여 요소 나열하기: {'apple', 'banana'}
- 집합 컴프리헨션(문법) 사용하기: {c for c in 'abracadabra' if c not in 'abc'}
- 생성자 사용하기: set(), set('foobar'), set(['a', 'b', 'foo'])

```{python}
{'apple', 'banana', 'apple'}
```
```{python}
{c for c in 'abracadabra' if c not in 'abc'}
```
```{python}
set(['a', 'b', 'foo'])
```

요소 가변성 여부에 따라 set과 frozenset으로 구분된다. 

공통점
: - 중복을 허용하지 않음
- 순서가 없음
- 해시 가능
- 집합 연산 지원

차이점
: - 변경 가능 여부: set은 가변(mutable) 집합, frozenset은 불변(immutable) 집합
- 사용 목적: set은 동적으로 변화하는 데이터, frozenset은 고정된 데이터나 딕셔너리 키로 사용
- 성능: frozenset이 조금 빠름

### 맵핑형

맵핑형은 (key:value) 쌍으로 이루어진 요소를 저장하기 위해 사용하는 자료형으로 `dict`(dictionary, 딕셔너리)가 있다. 

```python
class dict(**kwargs)
class dict(mapping, **kwargs)
class dict(iterable, **kwargs)
```

딕셔너리를 생성하는 방법은 다음과 같다.

- 중괄호 안에 쉽표로 구분된 `key:value` 쌍 나열: {"one":1, "two":2}, {1:"서울", 2:"부산"}
- 딕셔너리 컴프리헨션 사용: {}, {x: x**2 for x in range(10)}
- 생성자 사용: dict(), dict([1:'one',2:'two']), dict(서울='02',부산='051')

```{python}
dict(one=1, two=2, there=3)
```
```{python}
{'one':1, 'two':2, 'three':3}
```
```{python}
dict(zip(['one', 'two', 'three'], [1,2,3]))
```
```{python}
dict([('two',2), ('one',1), ('three',3)])
```
```{python}
dict({'three':3, 'two':2, 'one':1})
```
```{python}
dict({'three':3, 'one':1}, two=2)
```

## 변수와 상수

어떤 값이 있을 때 이 값을 저장할 수 있는 메모리 공간이 있다고 하자. 이 공간에 저장된 값을 바꿀 수 있다면 변수라고 하고 바꿀 수 없다면, 즉 고정된 값이라면 상수라고 한다. 이 때 저장하는 값을 리터럴이라고 한다.

곰 인형을 상자에 담는 경우를 생각해 보자. 이 때 상자는 메모리 공간이 되고 곰 인형을 담으면 변수가 된다. 만약 상자를 봉인하여 내용물을 바꿀 수 없게 된다면 이 상자를 상수라고 부르게 되고 곰 인형은 리터럴이 된다.
