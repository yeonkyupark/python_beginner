---
title: "파이썬 개요"
format: html
---

## 언어{#sec-language}

### 언어 정의

![언어](images/language.png)

언어(言語)에 대한 정의는 여러 가지 시도가 있었다. 아래는 그러한 예의 일부이다.[^language]

[^language]: [https://ko.m.wikipedia.org/wiki/언어](https://ko.m.wikipedia.org/wiki/%EC%96%B8%EC%96%B4){target="_blank"}

- **사람들이 자신의 생각을 다른 사람들에게 나타내고 전달하기 위해 사용하는 체계**
- 사물, 행동, 생각, 그리고 상태를 나타내는 체계.
- 사람들 사이에 공유되는 의미들의 체계.
- 문법적으로 맞는 말의 집합.
- 언어 공동체 내에서 이해될 수 있는 말의 집합.

언어를 사용하는 목적은 다음과 같다.

- **의사소통**: 개인 간의 생각, 감정, 정보 등을 효과적으로 전달하는 수단
- 사고의 도구: 복잡한 개념을 정리하고 논리적으로 사고하는 데 기여
- 사회적 결속: 공동체 구성원 간의 유대감을 형성하고 유지하는 역할
- 문화 전달: 세대 간 지식, 가치관, 전통 등을 전승하는 수단
- 자아 표현: 개인의 정체성과 개성을 드러내는 수단


### 의사전달

![통역](images/translator.png)


{{< video https://youtu.be/3VG2OgkRJK0?si=b3rPeVR7VSEUMBm8 >}}


## 프로그래밍 언어 {#sec-programming-language} 


프로그래밍 언어는 **컴퓨터가 이해하고 실행할 수 있는 명령을 작성하기 위한 언어**이다. 사람이 이해할 수 있는 문법과 구조를 사용하여 컴퓨터에게 특정 작업을 수행하도록 지시한다.

![프로그래밍 언어](images/interpreter.png) 


### 프로그래밍 언어의 종류  

**저급 언어 (Low-Level Language)**
:   - 기계어와 가까운 언어로, **컴퓨터가 직접 실행**할 수 있는 코드에 가깝다.
   - **예시**: 기계어(Machine Code), 어셈블리어(Assembly Language)
   - **특징**: 실행 속도가 빠르지만 사람이 이해하고 작성하기 어렵다.

**고급 언어 (High-Level Language)**
:   - 사람이 이해하기 쉬운 문법을 사용하며, **컴파일러나 인터프리터를 통해** 기계어로 변환된다.
   - **예시**: Python, Java, C++, JavaScript 등
   - **특징**: 직관적인 문법을 제공하며, 생산성이 높고 유지보수가 용이하다.


### 프로그래밍 언어의 실행 방식  

| 실행 방식     | 설명 |
|--------------|------------------------------------------------------------|
| **컴파일 언어** | 소스 코드를 기계어로 변환한 후 실행 파일을 생성하여 실행하는 방식. 실행 속도가 빠름. <br> **예시**: C, C++, Java (JVM 사용) |
| **인터프리터 언어** | 소스 코드를 한 줄씩 해석하며 실행하는 방식. 개발 속도가 빠르지만 실행 속도가 비교적 느림. <br> **예시**: Python, JavaScript, Ruby |
| **혼합형 (JIT 컴파일)** | 컴파일과 인터프리팅 방식을 혼합하여 실행 성능을 최적화한 방식. <br> **예시**: Java (JIT 컴파일을 사용하여 실행 속도를 높임) |
: 프로그래밍 언어 실행 방식

### 대표적인 프로그래밍 언어 및 특징  

| 언어 | 특징 |
|------|------------------------------------------------------------|
| **C** | 하드웨어 제어가 가능하고 성능이 뛰어나며, 운영체제 및 시스템 프로그래밍에 많이 사용됨. |
| **C++** | 객체지향 프로그래밍(OOP) 기능을 추가한 C 기반 언어로, 게임 개발 및 고성능 애플리케이션에 많이 사용됨. |
| **Python** | 문법이 간결하고 배우기 쉬우며, 데이터 과학, 인공지능(AI), 웹 개발 등 다양한 분야에서 활용됨. |
| **Java** | 플랫폼 독립적(Write Once, Run Anywhere)이며, 기업용 소프트웨어 및 안드로이드 앱 개발에 많이 사용됨. |
| **JavaScript** | 웹 개발에서 주로 사용되며, 브라우저에서 실행되는 동적 언어. Node.js를 통해 서버 개발도 가능함. |
| **Ruby** | 문법이 간결하고 직관적이며, 웹 개발에서 인기 있는 프레임워크인 Ruby on Rails를 제공함. |
| **Go** | 구글이 개발한 언어로, 높은 성능과 간결한 문법을 제공하며, 대규모 네트워크 및 서버 애플리케이션에 적합함. |
| **Swift** | 애플이 iOS 및 macOS 개발을 위해 만든 언어로, 성능이 뛰어나고 안전성을 고려한 설계를 가짐. |
: 대표적인 프로그래밍 언어

프로그래밍 언어는 목적에 따라 선택해야 하며, 특정 분야(웹 개발, 데이터 분석, 시스템 프로그래밍 등)에 적합한 언어를 배우는 것이 중요하다.

2025년 1월 기준, Python이 TIOBE 순위[^tiobe] 1위를 차지 하였다. 

[^tiobe]: [https://www.tiobe.com/tiobe-index/](https://www.tiobe.com/tiobe-index/){target="blank"}

![프로그래밍 언어 순위](images/tiobe_01.jpg)

![년도별 언어 순위 추이](images/tiobe_02.jpg)


## 파이쎤 소개 {#sec-python-intro}

![python](https://www.python.org/static/img/python-logo.png)


파이썬(Python)은 배우기 쉽고 강력한 기능을 갖춘 프로그래밍 언어이다. 문법이 간결하고 가독성이 높아 초보자부터 전문가까지 폭넓게 사용하고 있다.

### 파이썬의 특징

![https://xkcd.com/353/](https://i.namu.wiki/i/kNTQp1L2D8Zw3mLh2pFXd0htUjDB9soWo8HzZaLjDWVDhp_i_Rdf9fp05DqvVn1Lw3f1lPqdzCixvlpgoqulH3Ou9eygp0dklGR0YdUfbAolhj33si8G_Fv9FrcxNYjreSjUdviyeEYttegmslNmSdFy7ONyLzNxafQe0Pp4W6Y.webp){height="480px"}

파이썬은 다음과 같은 특징을 갖는다.

-   **쉬운 문법**: 영어와 비슷한 구문 구조를 가지고 있어 처음 배우는 사람도 쉽게 익힐 수 있다.\
-   **높은 생산성**: 적은 코드로 강력한 기능을 구현할 수 있어 개발 속도가 빠르다.\
-   **다양한 활용 분야**: 웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다.\
-   **강력한 커뮤니티**: 많은 개발자가 사용하며 다양한 라이브러리와 자료가 제공된다.

::: {.callout-note icon=false title="C vs. Python: 파일 내용 읽어 오기"}

C 코드
 
```c
#include <stdio.h> 
int main() { 
   FILE *file = fopen("text.txt", "r"); 
   char line[100]; 
   if (file) { 
      while (fgets(line, sizeof(line), file)) { 
         printf("%s", line); 
      } 
      fclose(file); 
   } 
   return 0; 
}
   ```

----

**파이썬 코드**

```python
with open("text.txt", "r") as file: 
   print(file.read())
```
:::

### 파이썬의 활용 분야

파이썬 주요 활용 분야는 다음과 같다.

-   **웹 개발**: Django, Flask와 같은 프레임워크를 활용하여 웹사이트와 API를 개발할 수 있다.\
-   **데이터 분석 및 인공지능**: pandas, NumPy, TensorFlow 등 라이브러리를 이용하여 데이터 처리와 머신러닝 모델을 만들 수 있다.\
-   **자동화 및 스크립트**: 반복 작업을 자동화하는 데 유용하며, 파일 처리 및 웹 스크래핑 등에 활용된다.\
-   **게임 개발**: Pygame과 같은 라이브러리를 이용하여 간단한 게임을 만들 수 있다.

파이썬은 초보자도 쉽게 배울 수 있으면서도 강력한 기능을 제공하는 언어로, 프로그래밍을 처음 접하는 사람에게 추천할 만한 언어이다.

### 파이썬의 장점과 단점

파이썬은 쉽고 강력한 프로그래밍 언어지만, 다른 언어와 비교했을 때 장점과 단점이 존재한다. 아래 표를 통해 주요 특징을 정리한다.

| 구분 | 장점 | 단점 |
|------------------------|------------------------|------------------------|
| 문법 | 코드가 간결하고 가독성이 높아 초보자도 쉽게 배울 수 있다. | 동적 타이핑(dynamic typing)으로 인해 대규모 프로젝트에서 예상치 못한 오류가 발생할 수 있다. |
| 속도 | 인터프리터 언어로 개발 속도가 빠르고 유지보수가 용이하다. | 컴파일 언어(C, C++)보다 실행 속도가 느리다. |
| 확장성 | 다양한 라이브러리와 프레임워크가 제공되어 다양한 분야에서 활용 가능하다. | 모바일 앱 개발에 적합한 프레임워크와 지원이 부족하다. |
| 다중 패러다임 | 객체 지향, 절차적, 함수형 프로그래밍을 모두 지원한다. | 다중 스레드 성능이 GIL(Global Interpreter Lock)으로 인해 제한된다. |
| 활용 분야 | 웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다. | 실시간 시스템, 임베디드 시스템과 같은 성능이 중요한 환경에서는 부적절할 수 있다. |
: 파이썬 장단점 {tbl-colwidths="[20,40,40]"}

파이썬은 배우기 쉽고 다양한 활용이 가능하다는 점에서 강력한 언어지만, 실행 속도나 멀티스레딩 제한과 같은 단점도 존재한다. 따라서 사용 목적에 따라 적절한 언어를 선택하는 것이 중요하다.

## 파이썬 설치 {#sec-python-installation}

파이썬을 설치하는 방법은 운영 체제에 따라 다를 수 있지만, 일반적으로 공식 웹사이트에서 설치 파일을 다운로드하여 설치하는 방식이 가장 쉽다.

### 파이썬 다운로드

-   [파이썬 공식 웹사이트](https://www.python.org/)에 접속한다.\
-   상단 메뉴에서 **Downloads**를 클릭한 후, 사용 중인 운영 체제(Windows, macOS, Linux)에 맞는 최신 버전의 파이썬을 다운로드한다.

### Windows에서 설치

-   다운로드한 `python-버전번호.exe` 파일을 실행한다.\
-   **"Add Python to PATH"** 옵션을 체크한 후 **"Install Now"** 버튼을 클릭한다.\
-   설치가 완료되면 **"Close"** 버튼을 클릭한다.

### macOS에서 설치

-   다운로드한 `python-버전번호.pkg` 파일을 실행한다.\
-   설치 마법사의 안내에 따라 진행한다.\
-   설치가 완료되면 터미널을 열어 아래 명령어를 실행하여 설치를 확인한다.

###  Linux(Ubuntu)에서 설치

-   터미널을 열고 다음 명령어를 실행한다.

    ```python
    sudo apt update
    sudo apt install python3
    ```

### 설치 확인

-   터미널(또는 명령 프롬프트, PowerShell)을 열고 아래 명령어를 입력한다.

    ```python
    python --version
    ```

-   설치된 파이썬 버전이 출력되면 정상적으로 설치된 것이다.

설치 후에는 @sec-idle, @sec-vsc, @sec-jupyter-notebook 등의 개발 환경을 설정하여 코딩을 시작할 수 있다.

::: {.callout-note icon=false title="코딩 vs. 프로그래밍"}

**코딩**과 **프로그래밍**은 종종 혼용되지만, 둘은 의미와 범위에서 차이가 있다. 아래 표를 통해 두 개념의 차이점을 비교할 수 있다.

| 구분           | 코딩 (Coding)                               | 프로그래밍 (Programming)                           |
|----------------|--------------------------------------------|--------------------------------------------------|
| **정의**        | 특정 프로그래밍 언어의 문법에 따라 코드를 작성하는 과정 | 문제 해결을 위해 소프트웨어를 설계하고 개발하는 전체 과정 |
| **목적**        | 컴퓨터가 이해할 수 있는 명령어를 작성하는 것      | 문제를 분석하고, 알고리즘을 설계하여 최적의 솔루션을 개발하는 것 |
| **범위**        | 프로그래밍의 하위 개념으로, 코드 작성에 국한됨     | 요구사항 분석, 설계, 코딩, 테스트, 디버깅, 유지보수 등 전체 소프트웨어 개발 과정 포함 |
| **요구 능력**   | 프로그래밍 언어의 문법 및 기초적인 논리 이해        | 문제 해결 능력, 알고리즘 설계, 시스템 설계, 최적화 기술 등 종합적 사고 필요 |
| **도구**        | 텍스트 에디터, IDE(통합 개발 환경)              | IDE, 버전 관리 시스템, 디버깅 도구, 테스트 프레임워크 등 다양한 개발 도구 |
| **출력 결과**   | 코드 파일 및 스크립트                         | 작동하는 소프트웨어, 애플리케이션 또는 시스템               |

**(1) **코딩**  
- **파이썬으로 숫자를 더하는 코드 작성**  
  ```python
  a = 5
  b = 3
  print(a + b)
  ```
- 주어진 문제를 **단순히 코드로 변환**하는 과정

**(2) 프로그래밍**  
- **가계부 애플리케이션 개발**  
  - 요구사항 분석: 사용자가 수입과 지출을 입력할 수 있도록 설계  
  - 데이터 구조 설계: 수입, 지출을 관리할 데이터베이스 설계  
  - 인터페이스 설계: 사용자 친화적인 화면 개발  
  - **코딩 포함**: 기능을 구현하기 위한 코드 작성  
  - 테스트 및 디버깅: 오류 수정과 최적화  
  - 유지보수: 기능 추가 및 업데이트  

즉, **코딩**은 **프로그래밍의 일부**로, **명령어를 작성**하는 행위에 집중하고, **프로그래밍**은 **전체 개발 과정**을 포괄하는 개념으로, 문제 해결을 위한 **설계, 개발, 유지보수**까지 포함한다. 따라서 코딩은 프로그래밍의 첫걸음이며, 프로그래밍은 더 넓고 복잡한 과정이다.
:::

## 개발 환경 설정 {#sec-dev-environment}

### VS Code {#sec-vsc}

VS Code(Visual Studio Code)는 마이크로소프트에서 제공하는 무료 코드 편집기로, 파이썬 개발 환경으로 많이 사용된다. 가벼우면서도 확장성이 뛰어나 초보자부터 전문가까지 널리 활용된다.  

![Visual Studio Code](https://code.visualstudio.com/assets/docs/getstarted/getting-started/open-folder.png)


#### VS Code 다운로드  
  - [VS Code 공식 웹사이트](https://code.visualstudio.com/)에 접속한다.  
  - 사용 중인 운영 체제(Windows, macOS, Linux)에 맞는 설치 파일을 다운로드한다.  

#### Windows에서 설치  
  - 다운로드한 `VSCodeUserSetup.exe` 파일을 실행한다.  
  - 설치 마법사가 실행되면 **"Next"**를 눌러 진행한다.  
  - 설치 옵션에서 **"Add to PATH"** 항목을 체크한다.  
  - **"Install"** 버튼을 클릭하여 설치를 완료한 후, **"Finish"**를 눌러 실행한다.  

#### macOS에서 설치  
  - 다운로드한 `VSCode-darwin.zip` 파일을 압축 해제한다.  
  - `Visual Studio Code.app`을 **응용 프로그램(Applications) 폴더**로 이동한다.  
  - 터미널에서 VS Code를 쉽게 실행하려면 아래 명령어를 입력하여 `code` 명령어를 등록한다.  
  
    ```sh
    sudo ln -s /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code /usr/local/bin/code
    ```

#### Linux(Ubuntu)에서 설치  
  - 터미널을 열고 다음 명령어를 실행하여 설치한다.  
  
    ```sh
    sudo apt update
    sudo apt install code
    ```
    
  - 설치가 완료되면 아래 명령어를 입력하여 실행한다. 
  
    ```sh
    code
    ```

#### VS Code에서 파이썬 개발 환경 설정  

##### 1) 파이썬 확장 프로그램 설치  
  - VS Code를 실행하고 **확장(Extensions)** 메뉴(`Ctrl + Shift + X`)를 연다.  
  - 검색창에 **"Python"**을 입력하고 **Microsoft 제공 Python 확장 프로그램**을 설치한다.  

##### 2) 기본 인터프리터 설정  
  - `Ctrl + Shift + P`를 눌러 **명령 팔레트(Command Palette)**를 연다.  
  - **"Python: Select Interpreter"**를 선택한 후 설치된 파이썬 경로를 선택한다.  
  - 터미널에서 `python --version`을 실행하여 정상적으로 설정되었는지 확인한다.  

##### 3) 실행 및 디버깅  
  - `.py` 파일을 만들고 파이썬 코드를 작성한다.  
  - `F5` 키를 눌러 실행하고 결과를 확인한다.  

#### 설치 확인  
  - VS Code에서 ```Ctrl + ` ``` 키를 눌러 터미널을 연다.  
  - 아래 명령어를 입력하여 파이썬이 정상적으로 동작하는지 확인한다.  
  
    ```sh
    python --version
    ```

설치가 완료되면 VS Code를 활용하여 편리하게 파이썬 프로그래밍을 진행할 수 있다. 자세한 사용법은 VS Code 튜토리얼을 참고한다.

- [https://code.visualstudio.com/docs/getstarted/getting-started](https://code.visualstudio.com/docs/getstarted/getting-started){target="_blank"}

### Jupyter Notebook {#sec-jupyter-notebook}

Jupyter Notebook은 웹 기반의 대화형 개발 환경으로, 파이썬 코드 실행과 문서화를 동시에 할 수 있어 데이터 분석 및 머신러닝 작업에 많이 사용된다.  

<center>
![https://jupyter-notebook.readthedocs.io/en/latest/](https://jupyter-notebook.readthedocs.io/en/latest/_images/notebook-running-code.png)
</center>


#### Jupyter Notebook 설치 전 준비  
Jupyter Notebook을 사용하려면 먼저 파이썬이 설치되어 있어야 한다.  

  - 아래 명령어를 실행하여 파이썬이 설치되어 있는지 확인한다.  
  
    ```sh
    python --version
    ```
    
  - 설치되어 있지 않다면 [파이썬 공식 사이트](https://www.python.org/)에서 설치한다(@sec-install-python 참고).  

#### Jupyter Notebook 설치  

##### 1) pip을 이용한 설치  
  - 터미널(또는 명령 프롬프트)을 열고 아래 명령어를 입력한다.  
  
    ```sh
    pip install notebook
    ```
    
  - 설치가 완료되면 `jupyter --version`을 실행하여 정상적으로 설치되었는지 확인한다.  

##### 2) Anaconda를 이용한 설치  
  - [Anaconda 공식 사이트](https://www.anaconda.com/)에서 설치 파일을 다운로드한다.  
  - 설치 후, 터미널(또는 Anaconda Prompt)에서 아래 명령어를 입력한다.  
  
    ```sh
    conda install jupyter
    ```
    
  - 설치가 완료되면 `jupyter --version`을 실행하여 확인한다.  

#### Jupyter Notebook 실행  

  - 터미널 또는 명령 프롬프트에서 아래 명령어를 입력한다.  
  
    ```sh
    jupyter notebook
    ```
    
  - 자동으로 웹 브라우저가 열리며 Jupyter Notebook 인터페이스가 실행된다.  

#### Jupyter Notebook 사용 방법  

##### 1) 새 노트북 생성  
  - Jupyter Notebook 실행 후, **New > Python 3**을 클릭하여 새로운 노트북을 만든다.  

##### 2) 코드 실행  
  - 코드 셀에 파이썬 코드를 입력한 후, `Shift + Enter`를 눌러 실행한다.  
  
    ```python
    print("Hello, Jupyter Notebook!")
    ```

##### 3) 저장 및 종료  
  - **파일 > Save and Checkpoint**를 선택하여 작업을 저장한다.  
  - Jupyter Notebook을 종료하려면 터미널에서 `Ctrl + C`를 누르고 `y`를 입력한다.  

설치가 완료되면 Jupyter Notebook을 활용하여 데이터 분석, 머신러닝, 문서 작성 등을 편리하게 수행할 수 있다. 자세한 사용법은 Jupyter Notebook 튜토리얼을 참고한다.

- [https://docs.jupyter.org/en/latest/start/index.html](https://docs.jupyter.org/en/latest/start/index.html){target="_blank"}

### PyCharm {#sec-pycharm}

![PyCharm](https://i.namu.wiki/i/pdAZVLjJIKjgRqk40zbRvUOMaDkhfXmsaLU-j4Cz104Q9BuV_BQUdgOPlkFimNadDEEMsSFFpLbvqiwJXVkVFdpQAfK-591zUdH3q6OJL51v9nTxKish8Cy0Apob6LQ-xOoIVL1Q-xaYbg2tx9fCqkdkoSyYNIuVcd6NaTI-FeU.svg)


#### PyCharm 다운로드
1. 웹 브라우저를 열고 **PyCharm 공식 웹사이트**([https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/))에 접속한다.
2. **"Download"** 버튼을 클릭한다.
3. 운영체제(Windows, macOS, Linux)에 맞는 버전을 선택한다.
4. **버전 선택**:
   - **Community Edition (무료)**: 기본적인 기능을 제공하며, 일반적인 파이썬 개발에 충분하다.
   - **Professional Edition (유료, 30일 체험 가능)**: 웹 개발, 데이터베이스, 과학 연산 등 고급 기능이 포함되어 있다.
5. 원하는 버전을 선택한 후 **"Download"** 버튼을 클릭하여 설치 파일을 다운로드한다.

##### PyCharm 설치

Windows
: 1. 다운로드한 `pycharm-community-*.exe` 또는 `pycharm-professional-*.exe` 파일을 실행한다.
2. 설치 마법사가 나타나면 **"Next"** 버튼을 클릭한다.
3. 설치 경로를 선택한 후 **"Next"** 버튼을 클릭한다.
4. 선택 옵션에서 필요에 따라 다음을 설정한다.
   - **"Create Desktop Shortcut"**: 바탕화면에 바로 가기 아이콘 생성
   - **"Update PATH variable"**: 명령 프롬프트에서 `pycharm` 명령어 실행 가능하도록 설정
5. **"Install"** 버튼을 클릭하여 설치를 진행한다.
6. 설치가 완료되면 **"Run PyCharm Community"** 옵션을 선택한 후 **"Finish"** 버튼을 클릭한다.

macOS
: 1. 다운로드한 `.dmg` 파일을 열어 PyCharm 아이콘을 Applications 폴더로 드래그앤드롭한다.
2. **응용 프로그램(Applications)** 폴더에서 PyCharm을 실행한다.

Linux
: 1. `.tar.gz` 파일을 다운로드한 후 압축을 해제한다.
2. 터미널에서 PyCharm 실행 파일을 실행한다.
   ```bash
   cd pycharm-community-*/bin
   ./pycharm.sh
   ```

##### PyCharm 첫 실행 및 설정
1. 처음 실행하면 **설정 마이그레이션** 옵션이 나타나는데, 기존 설정이 없다면 **"Do not import settings"**를 선택한다.
2. **UI 테마 선택** (Darcula 또는 Light) 후 **Next** 버튼을 클릭한다.
3. 원하는 플러그인을 설치한 후 **Start using PyCharm**을 클릭하여 IDE를 시작한다.
4. **새 프로젝트 생성** 또는 **기존 프로젝트 열기**를 선택하여 개발을 시작한다.

PyCharm이 정상적으로 실행되면 Python 개발 환경을 구성하고 프로젝트를 생성하여 코딩을 시작할 수 있다(@sec-pycharm-guide 참고).


## 첫 번째 프로그램 {#sec-1st-program}

![Hello, World[^ageekisborn]](images/ageekisborn.png)

[^ageekisborn]: https://geek-and-poke.com/geekandpoke/2011/2/11/a-geek-is-born.html

화면에 "Hello, World"를 출력하는 프로그램을 작성한다.[^helloworld]

[^helloworld]: [https://namu.wiki/w/Hello%2C%20world%21](https://namu.wiki/w/Hello%2C%20world%21){target="_blank"}

```{python}
print("Hello, World")
```

## 참고자료 {#sec-10-ref}

### IDLE {#sec-idle}

IDLE(Integrated Development and Learning Environment)은 파이썬에 기본적으로 포함된 통합 개발 환경(IDE)으로, 초보자가 쉽게 파이썬을 실행하고 학습할 수 있도록 설계된 프로그램이다.

<center>![IDLE](images/idle_run.png)</center>

#### IDLE의 특징

-   **기본 제공**: 파이썬을 설치하면 자동으로 포함되므로 별도의 설치가 필요하지 않다.\
-   **GUI 환경**: 코드 편집기와 실행 창을 제공하여 사용자가 쉽게 코드를 작성하고 실행할 수 있다.\
-   **대화형 인터프리터**: 즉시 코드를 실행하고 결과를 확인할 수 있는 인터랙티브 셸을 제공한다.\
-   **문법 강조**: 코드 편집 시 색상을 적용하여 가독성을 높여준다.\
-   **디버깅 기능**: 간단한 디버깅 도구를 제공하여 오류를 찾고 수정할 수 있다.

#### IDLE 실행 방법

-   **Windows**: `시작 메뉴 > Python > IDLE (Python 버전)` 선택\
-   **macOS**: `응용 프로그램 > Python 폴더 > IDLE` 실행\
-   **Linux**: 터미널에서 `idle3` 명령어 입력

#### IDLE 사용 방법

-   **대화형 셸(Interactive Shell)**:\
    실행 후 나타나는 창에서 바로 파이썬 코드를 입력하고 실행할 수 있다.

    ```python
    >>> print("Hello, Python!")
    Hello, Python!
    ```

-   **스크립트 작성 및 실행**:\
    `File > New File`을 선택하여 새 파일을 만들고 코드를 작성한 후, `F5` 키를 눌러 실행할 수 있다.

#### IDLE의 장점과 단점

| 구분 | 장점 | 단점 |
|------------------------|------------------------|------------------------|
| 사용 편의성 | 별도 설치 없이 바로 사용 가능하다. | 기능이 제한적이어서 대형 프로젝트에는 부적합하다. |
| 학습 도구 | 초보자가 배우기에 적합한 환경을 제공한다. | 자동 완성 기능이 부족하여 코드 작성 시 불편할 수 있다. |
| 인터랙티브 실행 | 코드 실행 결과를 즉시 확인할 수 있다. | 여러 파일을 관리하는 데 비효율적이다. |

IDLE은 파이썬을 처음 배우는 사람에게 적합한 개발 환경이며, 간단한 코드 실습이나 테스트를 할 때 유용하다. 하지만 규모가 큰 프로젝트를 진행할 경우 VS Code, PyCharm 같은 다른 개발 도구를 사용하는 것이 더 효율적이다.


### PyCharm 사용법 {#sec-pycharm-guide}

PyCharm은 파이썬 개발을 위한 강력한 **IDE(통합 개발 환경)**로, 코드 작성, 디버깅, 패키지 관리 등을 쉽게 할 수 있다.  


#### PyCharm 기본 화면 구성  

![https://www.jetbrains.com/help/pycharm/quick-start-guide.html#ui](https://resources.jetbrains.com/help/img/idea/2024.3/py_main_window_overview.png)

1. **윈도우 헤더**: 가장 인기 있는 기능을 빠르게 사용할 수 있도록 여러 도구가 포함된 영역  
    - **프로젝트 위젯**: 현재 열려 있는 프로젝트 관리  
    - **VCS(버전 관리 시스템) 위젯**: 코드 변경 사항 추적  
    - **실행 위젯**: 코드 실행 및 디버깅  
    - **기타 기능**: *Code With Me* (협업 도구), *Search Everywhere* (전체 검색), *설정* 열기  

2. **프로젝트 도구 창**: 화면 왼쪽에 위치하며, 프로젝트에 포함된 파일들을 보여줌  

3. **에디터**: 화면 오른쪽에 위치하며, 실제로 코드를 작성하는 공간  
    - 여러 파일을 동시에 열어둘 수 있도록 탭 방식으로 구성됨  

4. **컨텍스트 메뉴**: 인터페이스 요소나 코드 조각을 **오른쪽 클릭**하면 열리는 메뉴  
    - 해당 요소에서 사용할 수 있는 다양한 기능 제공  

5. **네비게이션 바**: 프로젝트의 폴더와 파일을 빠르게 탐색할 수 있도록 도와주는 도구  

6. **거터(Gutter)**: 에디터 왼쪽의 세로 줄  
    - 브레이크포인트(디버깅을 위해 코드 실행을 멈추는 지점) 표시  
    - 코드의 계층 구조(정의/선언 위치) 탐색 지원  
    - **라인 번호 및 VCS 변경 내역** 표시  

7. **스크롤바**: 에디터 오른쪽에 위치하며 코드 이동을 지원  
    - **코드 품질 검사 결과**가 표시됨  
    - 오른쪽 상단의 **인디케이터**를 통해 파일 전체의 코드 품질 상태 확인 가능  

8. **도구 창**: 작업 공간의 하단 및 측면에 위치한 특수 창  
    - 프로젝트 관리, 코드 검색 및 탐색, 버전 관리, 실행, 테스트, 디버깅 등의 기능 제공  

9. **상태 표시줄(Status Bar)**  
    - 현재 프로젝트 및 전체 IDE 상태를 표시  
    - 파일 인코딩, 줄 구분자, 코드 검사 프로필 등 다양한 정보 제공  
    - **Python 인터프리터 설정**을 빠르게 변경할 수 있는 기능 포함  

#### 새 프로젝트 생성 및 Python 환경 설정  

새 프로젝트 생성
: 1. PyCharm을 실행하고 **"New Project"**를 선택한다.
2. 프로젝트 위치(폴더)를 설정한다.
3. **Python 인터프리터** 선택:
   - **기본 인터프리터 사용**: `Existing Interpreter`에서 현재 설치된 Python을 선택
   - **새로운 가상 환경 생성**: `Virtualenv Environment`를 선택하여 가상 환경 생성
4. **Create** 버튼을 클릭하여 프로젝트를 생성한다.


#### 코드 작성 및 실행

새로운 파이썬 파일 생성
: 1. **Project 창**에서 프로젝트 폴더를 우클릭 → **New → Python File** 선택
2. 파일 이름을 입력하고 `.py` 확장자를 지정한 후 **Enter** 키를 누른다.
3. 생성된 파일에서 코드 작성


코드 실행
: - **방법 1**: 상단 **Run 버튼**(▶) 클릭
- **방법 2**: 코드 파일에서 **우클릭 → Run '파일명'** 선택
- **방법 3**: `Shift + F10` 키를 눌러 실행

**예제 코드**

```python
print("Hello, PyCharm!")
```


#### 패키지 설치 및 관리

내장 터미널 사용
: - `pip` 명령어를 사용하여 패키지 설치 가능:
  ```bash
  pip install numpy
  ```

PyCharm의 패키지 관리자 사용
: 1. **File → Settings → Project → Python Interpreter**로 이동.
2. **"+" 버튼**을 클릭하여 설치할 패키지를 검색한 후 **Install** 버튼을 누름.

#### 디버깅 (Debugging)

PyCharm에서는 **중단점(Breakpoint)**을 설정하여 코드를 단계별로 실행할 수 있다.

1. 코드 줄 번호 왼쪽을 클릭하여 중단점 설정.
2. 상단 메뉴에서 **"Run → Debug '파일명'"**을 선택.
3. 실행이 멈추면 **변수 값 확인, 단계별 실행(F8), 함수 내부 진입(F7)** 등을 활용하여 문제를 찾는다.


#### 코드 자동 완성 및 리팩토링

코드 자동 완성
: - `Ctrl + Space`를 누르면 함수 및 변수 자동 완성 기능 제공

코드 리팩토링
: - 변수 또는 함수명을 변경할 때 **우클릭 → Refactor → Rename** 사용

#### 버전 관리(Git 연동)
1. **VCS → Enable Version Control Integration**을 클릭
2. Git을 선택하고 연동하면 프로젝트를 GitHub 등과 연결 가능

---

PyCharm을 활용하면 파이썬 개발을 더욱 효율적으로 할 수 있으며, 기본적인 코드 작성부터 디버깅, 패키지 관리, Git 연동까지 다양한 기능을 사용할 수 있다.
