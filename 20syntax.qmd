---
title: "문법"
format: html
---

{{< include 21variable.qmd >}}

## 연산자

파이썬에서는 `산술`, `비교`, `논리`, `대입` 등과 같은 연산자를 제공한다.

### 산술

파이썬에서 **산술 연산자**는 숫자 값을 계산하는 연산자이다. 기본적인 사칙연산뿐만 아니라 나머지 연산, 거듭제곱 연산, 몫 연산도 제공한다.  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `+` | 덧셈 | `10 + 5` | `15` |
| `-` | 뺄셈 | `10 - 5` | `5` |
| `*` | 곱셈 | `10 * 5` | `50` |
| `/` | 나눗셈 (소수점 포함) | `10 / 3` | `3.3333` |
| `//` | 몫 연산 (정수 나눗셈) | `10 // 3` | `3` |
| `%` | 나머지 연산 | `10 % 3` | `1` |
| `**` | 거듭제곱 | `2 ** 3` | `8` |
: 산술 연산자 종류

#### 덧셈(+)과 뺄셈(-)

```{python}
a = 10
b = 5
print(a + b)  # 15
print(a - b)  # 5
```

#### 곱셈(*)과 나눗셈(/)

```{python}
x = 10
y = 3
print(x * y)  # 30
print(x / y)  # 3.3333333333333335 (소수 포함)
```

```{python}
#| error: true

x = 10
y = 0
print(x / y)  # ZeroDivisionError
```

#### 몫 연산(//)

결과값이 **정수**로 반환된다(소수점 이하 버림).

```{python}
print(10 // 3)  # 3
print(-10 // 3) # -4 (음수는 반올림이 아니라 내림)
```

#### 나머지 연산(%)

```{python}
print(10 % 3)  # 1
print(15 % 4)  # 3
```

#### 거듭제곱(**)

```{python}
print(2 ** 3)  # 8 (2의 3제곱)
print(5 ** 2)  # 25 (5의 제곱)
print(9 ** 0.5) # 3.0 (제곱근)
```

#### 산술 연산과 자료형  

`int`와 `float`이 함께 연산되면 결과는 `float`이 된다.  

```{python}
print(5 + 2.5)       # 7.5 (int + float = float)
```

```{python}  
print(10 / 2)        # 5.0 (나눗셈 결과는 항상 float)
```

```{python}  
print(int(10 / 2))   # 5   (int형 변환)
```

#### 연산자 우선순위  
파이썬의 산술 연산자는 **수학과 동일한 우선순위**를 따른다. 우선순위가 높을수록 먼저 계산된다.  

다음은 **파이썬 연산자 우선순위**를 높은 순서부터 낮은 순서로 정리한 표이다.

| 우선순위 | 연산자                  | 설명                                      |
|----------|-------------------------|-------------------------------------------|
| 1        | `()`                    | **괄호**: 가장 높은 우선순위를 가짐       |
| 2        | `**`                    | **거듭제곱**                               |
| 3        | `+x`, `-x`, `~x`        | **단항 연산자**: 양수, 음수, 비트 NOT     |
| 4        | `*`, `/`, `//`, `%`     | **곱셈, 나눗셈, 몫, 나머지**              |
| 5        | `+`, `-`                | **덧셈, 뺄셈**                             |
| 6        | `<<`, `>>`              | **비트 시프트**: 왼쪽/오른쪽 이동         |
| 7        | `&`                     | **비트 AND**                              |
| 8        | `^`                     | **비트 XOR**                              |
| 9        | `\|`                    | **비트 OR**                               |
| 10       | `==`, `!=`, `>`, `<`, `>=`, `<=`, `is`, `is not`, `in`, `not in` | **비교 연산자** |
| 11       | `not`                   | **논리 NOT**                              |
| 12       | `and`                   | **논리 AND**                              |
| 13       | `or`                    | **논리 OR**                               |
| 14       | `if ... else`           | **삼항 조건 연산자**                      |
| 15       | `=`, `+=`, `-=`, `*=`, `/=`, `//=`, `%=`, `**=`, `&=`, `|=`, `^=`, `>>=`, `<<=` | **할당(대입) 연산자** |
| 16       | `lambda`                | **람다 표현식**                           |
: 파이썬 연산자 우선순위

추가 설명
: - **괄호 `()`**: 가장 높은 우선순위를 가지며, 연산 순서를 명시적으로 지정할 때 사용  
- **거듭제곱 `**`**: 예를 들어, `2 ** 3 ** 2`는 `2 ** (3 ** 2)`로 계산됨  
- **논리 연산자**: `not` > `and` > `or` 순서로 우선순위를 가진다  
- **비교 연산자**: `==`, `!=`, `>`, `<` 등은 같은 우선순위를 가지며, `in`, `is` 같은 연산자도 여기에 포함됨  
- **삼항 조건 연산자**: `a if 조건 else b` 형태로 사용됨

```{python}
print(2 + 3 * 4)     # 14 (* 먼저 계산)
```

```{python}  
print((2 + 3) * 4)   # 20 (괄호 안 먼저 계산)
```

```{python}  
print(2 ** 3 * 4)    # 32 (** 먼저 계산)
```
우선 순위가 있는 연산시 혼동을 피하기 위해 괄로로 묶어 계산한다.

다음은 연산자 우선순위 관련 예제이다.

괄호와 거듭제곱 우선순위
:  
```{python}
result = 2 ** 3 ** 2
print(result)  # 출력: 512
```

거듭제곱 `**` 연산자는 **오른쪽 결합**(right-associative)이다.  따라서 `2 ** (3 ** 2)`로 계산되어 `2 ** 9 = 512`가 된다.

곱셈과 덧셈 우선순위
:  
```{python}
result = 2 + 3 * 4
print(result)  # 출력: 14
```

곱셈 `*`이 덧셈 `+`보다 **우선순위가 높아** 먼저 계산된다.  `3 * 4 = 12` 후에 `2 + 12 = 14`로 결과가 나온다.


논리 연산자 `and`, `or`, `not` 우선순위
:  
```{python}
result = True or False and not False
print(result)  # 출력: True
```

1. `not`이 가장 먼저 계산 → `not False = True`  
2. `and`가 `or`보다 우선 → `False and True = False`  
3. 마지막으로 `True or False = True`


### 비교

파이썬에서 비교 연산자는 두 값을 비교하고 `True` 또는 `False`를 반환하는 연산자이다.

#### 비교 연산자 종류 

| 연산자 | 의미 | 설명 | 예제 | 결과 |
|--------|------|------|------|------|
| `==` | 같음 | 두 값이 같으면 `True`, 다르면 `False` | `5 == 5` | `True` |
| `!=` | 다름 | 두 값이 다르면 `True`, 같으면 `False` | `5 != 3` | `True` |
| `<` | 작음 | 왼쪽 값이 오른쪽 값보다 작으면 `True` | `3 < 5` | `True` |
| `>` | 큼 | 왼쪽 값이 오른쪽 값보다 크면 `True` | `5 > 3` | `True` |
| `<=` | 작거나 같음 | 왼쪽 값이 오른쪽 값보다 작거나 같으면 `True` | `5 <= 5` | `True` |
| `>=` | 크거나 같음 | 왼쪽 값이 오른쪽 값보다 크거나 같으면 `True` | `5 >= 3` | `True` |
: 비교 연산자 종류 {tbl-colwidths="[10,15,50,15,10]"}

- `==` (같음)  
  : 두 값이 같으면 `True`, 다르면 `False`를 반환한다.
  
  ```{python}
  print(5 == 5)  # True
  print(5 == 3)  # False
  ```  

- `!=` (다름)  
  : 두 값이 다르면 `True`, 같으면 `False`를 반환한다. 
  
  ```{python}
  print(5 != 3)  # True
  print(5 != 5)  # False
  ```  

- `<` (작음)  
  : 왼쪽 값이 오른쪽 값보다 작으면 `True`, 크거나 같으면 `False`를 반환한다.  
  
  ```{python}
  print(3 < 5)  # True
  print(5 < 5)  # False
  ```  

- `>` (큼)  
  : 왼쪽 값이 오른쪽 값보다 크면 `True`, 작거나 같으면 `False`를 반환한다.  
  
  ```{python}
  print(5 > 3)  # True
  print(5 > 5)  # False
  ```  

- `<=` (작거나 같음)  
  : 왼쪽 값이 오른쪽 값보다 작거나 같으면 `True`, 크면 `False`를 반환한다.  
  
  ```{python}
  print(3 <= 5)  # True
  print(5 <= 5)  # True
  print(6 <= 5)  # False
  ```  

- `>=` (크거나 같음)  
  : 왼쪽 값이 오른쪽 값보다 크거나 같으면 `True`, 작으면 `False`를 반환한다.  
  
  ```{python}
  print(5 >= 3)  # True
  print(5 >= 5)  # True
  print(3 >= 5)  # False
  ```  

#### 비교 연산자의 특징  

- **문자열 비교**  
  : 문자열도 비교 연산자로 비교할 수 있으며, **사전 순서(ASCII 코드 값)**(@nte-ascii 참고) 에 따라 결과가 결정된다. 
  
  ```{python}
  print("apple" < "banana")  # True ("a"가 "b"보다 앞에 있음)
  print("abc" < "abcd")  # True (문자 수가 적은 것이 더 작음)
  ```  

- **논리값 비교**  
  : `True`는 `1`, `False`는 `0`과 동등하게 취급된다. 
  
  ```{python}
  print(True == 1)  # True
  print(False == 0)  # True
  print(True > False)  # True (1 > 0)
  ```  

- **비교 연산자 연쇄 사용 (Chaining)**  
  : 여러 개의 비교 연산자를 연결하여 사용할 수 있다.  
  
  ```{python}
  x = 5
  print(3 < x < 10)  # True (3 < 5 and 5 < 10)
  print(3 < x > 2)  # True (3 < 5 and 5 > 2)
  ```  

비교 연산자는 조건문, 반복문, 필터링 등의 다양한 상황에서 활용된다.

### 논리

파이썬에서 **논리 연산자**는 **여러 개의 조건을 결합하거나 부정할 때** 사용한다. 논리 연산자는 **`and`**, **`or`**, **`not`** 세 가지가 있다.  

#### 논리 연산자의 종류  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `and` | **둘 다 `True`일 때만 `True`**, 하나라도 `False`이면 `False` | `True and True` | `True` |
| `or` | **둘 중 하나라도 `True`이면 `True`** | `True or False` | `True` |
| `not` | **`True`를 `False`로, `False`를 `True`로 변환** | `not True` | `False` |
: 논리 연산자

#### and 연산자

연산자 좌우항 둘 다 `True`여야 `True`이다.  

```{python}
print(True and True)   # True
```

```{python}   
print(True and False)  # False
```

```{python}  
print(False and True)  # False
```

```{python}  
print(False and False) # False
```

```{python}
x = 10
print(x > 5 and x < 20)  # True (둘 다 True)
print(x > 5 and x > 20)  # False (하나가 False)
```

#### or 연산자

연산자 좌우향 중 하나라도 `True`면 `True`이다. 

```{python}
print(True or True)   # True
```

```{python}   
print(True or False)  # True
```

```{python}  
print(False or True)  # True
```

```{python}  
print(False or False) # False
```

```{python}
y = 7
print(y < 5 or y > 6)   # True (하나가 True)
```

```{python}  
print(y < 5 or y == 7)  # True (하나가 True)
```

```{python}  
print(y < 5 or y > 10)  # False (둘 다 False)
```

#### not 연산자

논리값을 반대로 바꿔준다. 즉, `True` → `False`, `False` → `True`로 반환한다.

```{python}
print(not True)   # False
print(not False)  # True
```

```{python}
a = 5
print(not (a > 10))  # True (a > 10이 False이므로 not을 적용하면 True)
```

#### 논리 연산자와 비교 연산자 함께 사용  

논리 연산자는 비교 연산자(`>`, `<`, `==`, `!=` 등)와 함께 사용되어 **조건문을 조합**할 때 유용하다.  

```{python}
age = 25
print(age > 18 and age < 30)  # True (두 조건이 모두 참)
```

```{python}  
print(age < 18 or age > 30)   # False (둘 다 거짓)
```

```{python}  
print(not age > 18)           # False (age가 18보다 크므로 not을 적용하면 False)
```

#### 논리연산 단축 평가  

파이썬은 논리 연산을 수행할 때 **불필요한 연산을 생략**하는 **단축 평가(short-circuit evaluation)** 를 적용한다.

`and` 연산자에서 단축 평가
: - 첫 번째 값이 `False`이면 **결과가 무조건 `False`**이므로 두 번째 값은 검사하지 않는다.  

```{python}
print(False and print("실행되지 않음"))  # False만 출력됨
```

`or` 연산자에서 단축 평가
: - 첫 번째 값이 `True`이면 **결과가 무조건 `True`**이므로 두 번째 값은 검사하지 않는다.  

```{python}
print(True or print("실행되지 않음"))  # True만 출력됨
```

#### 논리 연산자와 숫자형 값  

파이썬에서 `True`는 `1`, `False`는 `0`과 동일하게 취급된다. 또한, **빈 값(`0`, `None`, `''`, `[]`, `{}`)은 `False`, 나머지는 `True`**로 평가된다.  

```{python}
print(bool(0))    # False
```

```{python}  
print(bool(1))    # True
```

```{python}  
print(bool(""))   # False
```

```{python}  
print(bool("Hi")) # True
```

#### 논리 연산자의 반환값  
논리 연산자는 단순히 `True`나 `False`가 아니라 **실제 값을 반환**하기도 한다.  

`and` 연산자
: - 첫 번째 값이 `True`이면 두 번째 값을 반환  

```{python}
print(10 and 20)  # 20 (10이 True이므로 20 반환)
```

```{python}   
print(0 and 20)   # 0 (0이 False이므로 0 반환)
```

`or` 연산자
: - 첫 번째 값이 `True`이면 그 값을 반환, `False`이면 두 번째 값을 반환**  

```{python}
print(10 or 20)  # 10 (첫 번째 값이 True이므로 그대로 반환)
```

```{python}  
print(0 or 20)   # 20 (첫 번째 값이 False이므로 두 번째 값 반환)
```

논리 연산자를 정리하면 다음과 같다.

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `and` | 둘 다 `True`일 때 `True` | `True and False` | `False` |
| `or` | 하나라도 `True`이면 `True` | `True or False` | `True` |
| `not` | `True ↔ False` 변환 | `not True` | `False` |
: 논리 연산자

논리 연산자는 **조건문, 반복문, 복잡한 조건을 평가할 때 필수적으로 사용**되며, **단축 평가**와 **값 반환 방식**을 이해하면 더욱 효율적으로 활용할 수 있다.

### 대입

파이썬에서 **대입 연산자(할당 연산자)**는 변수에 값을 저장하거나 연산 후 결과를 변수에 저장하는 데 사용한다.  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `=`  | 기본 대입 (값을 변수에 저장) | `a = 10` | `a`에 `10` 저장 |
| `+=` | 덧셈 후 대입 | `a += 5` | `a = a + 5` |
| `-=` | 뺄셈 후 대입 | `a -= 3` | `a = a - 3` |
| `*=` | 곱셈 후 대입 | `a *= 2` | `a = a * 2` |
| `/=` | 나눗셈 후 대입 | `a /= 4` | `a = a / 4` |
| `//=` | 몫 연산 후 대입 | `a //= 3` | `a = a // 3` |
| `%=` | 나머지 연산 후 대입 | `a %= 2` | `a = a % 2` |
| `**=` | 거듭제곱 후 대입 | `a **= 3` | `a = a ** 3` |
: 대입 연산자의 종류

#### 기본 대입 연산자

우측항을 좌측 좌측항에 대입한다.

- `=`  

    ```{python}
    x = 10
    y = 5
    print(x)  # 10
    print(y)  # 5
    ```

#### 복합 대입 연산자

연산자 둘 이상을 함께 사용하는 경우이다.

- `+=`, `-=`, `*=`, `/=`, `//=`, `%=`, `**=`

    ```{python}
    a = 10
    
    a += 5   # a = a + 5
    print(a)  # 15
    ```
    
    ```{python}      
    a -= 3   # a = a - 3
    print(a)  # 12
    ```
    
    ```{python} 
    a *= 2   # a = a * 2
    print(a)  # 24
    ```
    
    ```{python}      
    a /= 4   # a = a / 4
    print(a)  # 6.0 (나눗셈 결과는 항상 float)
    ```
    
    ```{python}     
    a //= 2  # a = a // 2
    print(a)  # 3 (정수 나눗셈)
    ```
    
    ```{python}      
    a %= 2   # a = a % 2
    print(a)  # 1 (나머지 연산)
    ```
    
    ```{python}     
    a **= 3  # a = a ** 3
    print(a)  # 1 (1의 3제곱)
    ```

#### 여러 개의 변수에 값 대입  

여러 변수에 값을 한번에 대입하는 경우이다.

##### 여러 변수에 한 번에 대입 

가장 우측항을 좌측이로 대입 연산을 이어 나간다. 

```{python}
x = y = z = 100
print(x, y, z)  # 100 100 100
```

##### 여러 변수에 각각 다른 값 대입 (튜플 형태)

좌측항과 우측항 순서에 맞춰 값을 대입한다.

```{python}
a, b, c = 1, 2, 3
print(a, b, c)  # 1 2 3
```

#### 변수 값 교환  

파이썬에서는 **임시 변수 없이** 두 변수의 값을 쉽게 교환할 수 있다.  

```{python}
a, b = 10, 20
a, b = b, a
print(a, b)  # 20 10
```

::: {.callout-note icon=false title="스왑(Swap)"}

컴퓨터 프로그래밍에서 교체 연산(swap) 또는 스왑 알고리즘(swap algorithm)은 두 변수에 들어 있는 값을 서로 맞바꾸는 연산 또는 이러한 연산을 사용하는 알고리즘이다.[^swap]

[^swap]: [https://ko.m.wikipedia.org/wiki/교체_연산](https://ko.m.wikipedia.org/wiki/%EA%B5%90%EC%B2%B4_%EC%97%B0%EC%82%B0){target="_blank"}

```{python}
A = 5
B = 10

# 일반적인 스왑 방법 (임시 변수 사용)
TEMP = A
A = B
B = TEMP

print(f"A: {A}, B: {B}")  # A: 10, B: 5

# 파이썬에서는 한 줄로 스왑 가능 (튜플 언패킹)
A, B = B, A
print(f"A: {A}, B: {B}")  # A: 5, B: 10 
```
:::

#### 리스트에서 값을 대입하는 언패킹(unpacking)

```{python}
numbers = [1, 2, 3]
x, y, z = numbers
print(x, y, z)  # 1 2 3
```

대입 연산자는 **값을 저장하고, 계산을 간단하게 만들며, 여러 변수에 값을 동시에 할당**할 때 유용하다.

### 기타 연산자

파이썬에서는 **산술 연산자, 비교 연산자, 논리 연산자, 대입 연산자** 외에도 다양한 연산자가 있다. 대표적으로 **비트 연산자, 멤버 연산자, 식별 연산자**가 있다.  

#### 비트 연산자 (Bitwise Operators)  

비트 연산자는 **정수를 이진수(0과 1)로 변환하여 비트 단위로 연산**할 때 사용한다.  

| 연산자 | 설명 | 예제 (`a = 5`, `b = 3`) | 결과 (`a = 5(101)`, `b = 3(011)`) |
|--------|------|-----------------|----------------|
| `&`  | AND (둘 다 `1`이면 `1`) | `a & b` | `1 (001)` |
| `|`  | OR (하나라도 `1`이면 `1`) | `a | b` | `7 (111)` |
| `^`  | XOR (다를 때 `1`) | `a ^ b` | `6 (110)` |
| `~`  | NOT (비트 반전, 1의 보수) | `~a` | `-6` (음수 표현 방식) |
| `<<` | 왼쪽 시프트 (비트 이동, `2^n` 배 증가) | `a << 1` | `10 (1010)` |
| `>>` | 오른쪽 시프트 (비트 이동, `2^n` 배 감소) | `a >> 1` | `2 (10)` |


![AND, OR, XOR 연산](images/bitandorxor.png)

![시프트 연산](images/bitandorxor.png)


```{python}
a = 5  # 101 (2진수)
b = 3  # 011 (2진수)

print(a & b)  # 1  (001)
```

```{python} 
print(a | b)  # 7  (111)
```

```{python}  
print(a ^ b)  # 6  (110)
```

```{python}  
print(~a)     # -6 (음수 표현 방식)
```

```{python}  
print(a << 1) # 10 (1010) → 2배 증가
```

```{python}  
print(a >> 1) # 2  (10)   → 2배 감소
```

#### 멤버 연산자 (Membership Operators)  

멤버 연산자는 **특정 값이 리스트, 튜플, 문자열 등에 포함되어 있는지 확인**할 때 사용한다.  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `in` | 값이 포함되어 있으면 `True` | `'a' in 'apple'` | `True` |
| `not in` | 값이 포함되지 않으면 `True` | `'x' not in 'apple'` | `True` |

```{python}
text = "hello"
print('h' in text)     # True
print('z' not in text) # True
```

```{python} 
numbers = [1, 2, 3, 4]
print(3 in numbers)    # True
print(5 not in numbers) # True
```


#### 식별 연산자 (Identity Operators)  

식별 연산자는 **두 변수가 같은 객체를 가리키는지 확인**할 때 사용한다(==은 값 비교, `is`는 객체 비교).  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `is` | 같은 객체이면 `True` | `a is b` | `True` 또는 `False` |
| `is not` | 다른 객체이면 `True` | `a is not b` | `True` 또는 `False` |

```{python}
a = [1, 2, 3]
b = a
c = [1, 2, 3]

print(a is b)   # True (같은 객체를 가리킴)
```

```{python} 
print(a is c)   # False (같은 값이지만 다른 객체)
```

```{python} 
print(a == c)   # True (값이 같음)
```

```{python}  
print(a is not c) # True (다른 객체)
```

위 연산자들은 **비트 연산, 데이터 포함 여부 검사, 객체 비교** 등에 유용하게 사용된다.

## 주석 사용법

파이썬에서 **주석(Comment)**은 코드에 대한 설명을 작성하는 부분으로, 프로그램 실행에는 영향을 주지 않는다. **코드 가독성을 높이고 유지보수를 쉽게 하기 위해 사용**한다.  

| 주석 유형 | 설명 | 예제 |
|-----------|------|------|
| 한 줄 주석 | `#`을 사용하여 작성 | `# 변수 선언` |
| 여러 줄 주석 | `"""` 또는 `'''`로 감싸서 작성 | `""" 여러 줄 주석 """` |
| 여러 줄 `#` 주석 | 여러 줄에 걸쳐 `#` 사용 | `# 첫 번째 줄` <br> `# 두 번째 줄` |
: 주석 유형 {tbl-colwidths="[20,40,40]"}


### 한 줄 주석   
한 줄 주석(Single-line Comment)은 `#` 기호를 사용하여 작성한다.  

```python
# 변수 선언
x = 10  # x에 10을 할당
print(x)  # x 값을 출력
```

- `#` 뒤에 오는 내용은 주석 처리되어 실행되지 않는다.

### 여러 줄 주석   
여러 줄 주석(Multi-line Comment)은 **여러 줄을 한 번에 주석 처리할 때 사용**하며, 보통 **큰 설명을 추가할 때** 사용한다.  

#### 여러 줄 주석 

여러 줄에 걸쳐 주석을 추가하는 경우 `"""` 또는 `'''` 사용한다.

```python
"""
이 코드는 사칙연산을 수행하는 코드입니다.
각 연산 결과를 출력합니다.
"""
a = 10
b = 5

print(a + b)  # 덧셈
print(a - b)  # 뺄셈
```

```python
'''
여러 줄 주석을 사용하여
설명을 추가할 수 있습니다.
'''
print("Hello, World!")
```

`"""` 또는 `'''`로 감싸면 여러 줄을 주석 처리할 수 있다.  다만, `"""`와 `'''`는 **문자열 리터럴로도 사용될 수 있으므로**, 문서화 문자열(docstring)로 인식될 수 있다.


#### 여러 줄 주석 - 여러 개의 # 사용  
여러 줄을 주석 처리할 때, `#`을 각 줄마다 붙이는 방법도 있다.  

```{python}
# 이 코드는 두 숫자를 더하는 코드입니다.
# 결과를 출력합니다.

a = 10
b = 20
print(a + b)  # 30 출력
```

`#`을 여러 줄에 걸쳐 사용하면 여러 줄을 주석 처리할 수 있다.

### 주석 활용 예제  

#### 디버깅할 때 특정 코드 실행 막기

```{python}
x = 10
y = 20
# print(x + y)  # 이 줄은 실행되지 않음
print(x * y)  # 200 출력
```

특정 줄을 실행하지 않도록 하여 **코드를 테스트할 때 유용하게 사용**할 수 있다.

#### 함수 설명으로 활용  
함수의 설명(docstring)을 추가할 때 `"""` 또는 `'''`를 사용하면 **문서화 문자열(docstring)**로 활용할 수 있다. 

```{python}
def add(a, b):
    """두 수를 더하는 함수"""
    return a + b

print(add(3, 5))  # 8 출력
```

`help(add)`를 실행하면 함수의 설명이 출력된다.

```{python}  
help(add)
```

### 주석 작성 시 주의할 점  

- **필요한 부분만 주석을 작성**해야 한다. (불필요한 주석은 오히려 가독성을 해친다.)  
- **일관된 스타일로 작성**하는 것이 좋다. (주석 스타일을 팀과 맞추는 것이 중요하다.)  
- **주석은 항상 최신 상태로 유지**해야 한다. (코드를 변경했을 때 주석도 함께 수정해야 한다.)  

파이썬 주석은 **코드를 이해하기 쉽게 만들고, 디버깅할 때 유용하며, 문서화 목적으로도 활용**할 수 있다.


## 참고사항

### 언어별 상수 키워드 {#sec-const-keyword}

프로그래밍 언어별로 상수를 정의할 때 사용하는 **키워드**를 아래와 같다.  

| 언어         | 상수 키워드     | 설명 |
|--------------|-----------------|--------------------------------------------------------|
| **C**        | `const`, `#define` | `const`로 상수 선언, `#define`은 전처리기 지시문으로 상수 정의 |
| **C++**      | `const`, `constexpr` | `const`는 변경 불가 변수, `constexpr`은 컴파일 시간 상수 |
| **Java**     | `final`          | 변수에 `final`을 붙이면 값 변경 불가 (상수로 사용) |
| **C#**       | `const`, `readonly` | `const`는 컴파일 타임 상수, `readonly`는 런타임 초기화 후 변경 불가 |
| **Python**   | (키워드 없음)    | 대문자 변수명으로 상수 표현 (관례), 변경 방지 기능 없음 |
| **JavaScript** | `const`        | 재할당 불가능한 변수 선언, 객체나 배열의 내부 값은 변경 가능 |
| **Swift**    | `let`            | 상수 선언 시 사용, 한 번 초기화된 후 값 변경 불가 |
| **Kotlin**   | `val`, `const val` | `val`은 변경 불가 변수, `const val`은 컴파일 타임 상수 |
| **Go**       | `const`          | 컴파일 타임 상수 선언에 사용 |
| **Rust**     | `const`, `let`   | `const`는 상수, `let`은 기본 변수 선언 (불변성은 `mut` 유무로 결정) |
| **TypeScript** | `const`        | JavaScript와 동일하게 상수 선언 |
| **PHP**      | `define()`, `const` | `define()` 함수 또는 `const` 키워드로 상수 선언 |
| **Ruby**     | (키워드 없음)    | 대문자 변수명으로 상수 표현, 재할당 시 경고만 발생 |
: 프로그래밍 언어별 상수 키워드

참고  
: - **Python, Ruby**처럼 상수 전용 키워드는 없지만 **대문자 변수명** 사용으로 상수를 표현하는 언어도 있음  
- **JavaScript**의 `const`는 값 재할당은 불가능하지만, 객체나 배열 내부의 데이터는 변경 가능

### 실수 표현 {#sec-exp-floating-point}

컴퓨터 프로그래밍에서 **실수(소수)**를 정확히 표현할 수 없다. 이유는 **컴퓨터가 2진수(0과 1)**로 숫자를 저장하기 때문이다.

#### 비유로 이해하기  

- **10진수(사람)**: 우리는 0.1, 0.5처럼 소수를 **10진수**로 쉽게 표현할 수 있다.  
- **2진수(컴퓨터)**: 컴퓨터는 **2진수**로 숫자를 저장하는데, **0.1(10진수)**는 **2진수로 정확히 표현할 수 없다.**

#### 간단한 예  

![소수점을 2진수로 변환](images/floattobin.png)

- **1/3**을 10진수로 나타내면 **0.3333...** (무한 반복)  
- 마찬가지로, 컴퓨터가 **0.1**을 2진수로 변환하면 무한하게 반복되는 값이 되어 **정확히 저장할 수 없다.** [^floattobin]

[^floattobin]: [https://www.h-schmidt.net/FloatConverter/IEEE754.html](https://www.h-schmidt.net/FloatConverter/IEEE754.html){target="_blank"}

#### 결과  
- 컴퓨터는 이런 무한한 숫자를 저장할 수 없으므로 **가까운 값으로 반올림**해서 저장한다.  
- 그래서 **0.1 + 0.2 != 0.3** 같은 이상한 결과가 나오기도 한다.

```{python}
a = 0.1
b = 0.2
c = 0.3

print(a+b == c)
print(a+b)
```

#### 해결 방법  
- **정밀한 계산**이 필요할 때는 **`decimal`** 모듈(파이썬) 같은 **고정 소수점** 방식을 사용하거나, **부동소수점 오차**를 고려해서 코드를 작성한다.
