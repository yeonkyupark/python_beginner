---
title: "문법"
format: html
---

## 변수와 상수 

변수, 상수, 리터럴은 프로그래밍에서 데이터를 저장하고 관리하는 개념이다.  

### 변수  

변수란 값을 변경할 수 있는 저장 공간을 말한다.

- 프로그램에서 데이터를 저장하고 변경할 수 있는 공간  
- 특정한 값이 할당되며, 필요에 따라 변경할 수 있음  
- 선언 시 변수명을 사용하여 값을 저장하고 참조함  

### 상수  

상수란 값을 변경할 수 없는 저장 공간을 말한다.

- 한 번 할당되면 변경할 수 없는 값  
- 프로그램이 실행되는 동안 값이 유지됨  
- 일반적으로 `const`, `final` 등의 키워드를 사용하여 선언함  

### 리터럴  

저장 공간에 실제 저장하는 값을 말한다.

- 프로그램에서 직접 사용하는 고정된 값  
- 변수나 상수에 할당되는 실제 데이터 값  
- 숫자, 문자열, 불리언, 배열 등 다양한 형태가 있음  

아래는 파이썬 예제이다.

```python
# 변수
x = 10  
y = "Hello"

# 상수 (Python에서는 관례적으로 대문자로 작성)
PI = 3.14159  

# 리터럴
print(100)       # 정수 리터럴
print(3.14)      # 실수 리터럴
print("Python")  # 문자열 리터럴
```

파이썬에서는 상수를 만드는 "const"와 같은 키워드를 제공하지 않는다. 관례적으로 상수인 경우 변수명을 대문자로 작성한다(개발자간 암묵적인 규칙).

## 자료형 {#sec-datatype}

자료형은 **데이터의 종류를 나타내는 것**이다. 프로그래밍에서 데이터를 다룰 때, 컴퓨터가 그 데이터의 성격을 이해할 수 있도록 자료형을 사용한다.

### 자료형의 역할
- 데이터를 어떻게 저장하고 처리할지 결정한다.
- 허용되는 연산을 정의한다.

### 파이썬에서 주요 자료형
1. **숫자형 (Number)**  
   - 정수, 실수, 복소수를 포함한다.
   - 예: `10`(정수), `3.14`(실수)

2. **문자열 (String)**  
   - 문자나 단어를 묶어놓은 데이터.
   - 예: `"안녕하세요"`, `'Python'`

3. **불리언 (Boolean)**  
   - 참(`True`)과 거짓(`False`)만을 표현하는 자료형.
   - 예: `True`, `False`

4. **리스트 (List)**  
   - 여러 개의 값을 순서대로 저장하는 자료형.
   - 예: `[1, 2, 3]`, `["a", "b", "c"]`

5. **튜플 (Tuple)**  
   - 리스트와 비슷하지만, 값이 변경되지 않는다.
   - 예: `(1, 2, 3)`

6. **딕셔너리 (Dictionary)**  
   - 키(key)와 값(value)을 쌍으로 저장하는 자료형.
   - 예: `{"이름": "철수", "나이": 20}`

7. **집합 (Set)**  
   - 중복 없는 값을 저장하는 자료형.
   - 예: `{1, 2, 3}`

### 자료형의 예제

```python
# 숫자형
x = 10
y = 3.14

# 문자열
name = "Python"

# 논리값(불리언)
is_valid = True

# 리스트
numbers = [1, 2, 3]

# 튜플
coordinates = (10, 20)

# 딕셔너리
person = {"name": "Alice", "age": 25}

# 집합
unique_numbers = {1, 2, 3, 4}
```

### 쉽게 기억하는 법
- **숫자**: 계산할 수 있는 데이터  
- **문자열**: 글자나 단어를 표현  
- **리스트/튜플**: 여러 개의 데이터를 하나로 묶기  
- **딕셔너리**: "단어: 뜻"처럼 짝지어진 데이터  
- **불리언**: 맞다/틀리다(True/False)로 답하는 데이터  

## 숫자형 {#sec-numeric}

파이썬에서 숫자형 자료형은 **숫자를 저장하고 연산할 수 있는 데이터 타입**이다. 크게 **정수형, 실수형, 복소수형**으로 나뉜다.

### 정수형 (Integer, `int`)  

- 소수점이 없는 정수 값을 저장하는 자료형  
- 크기의 제한 없이 매우 큰 정수도 표현 가능  
- 양수, 음수, 0을 포함  
- 예제  

  ```{python}
  a = 10   # 양의 정수
  b = -5   # 음의 정수
  c = 0    # 0도 정수
  d = 999999999999999999999  # 매우 큰 정수도 가능
  print(type(a))  # <class 'int'>
  ```

### 실수형 (Floating Point, `float`)  

- 소수점이 있는 숫자를 표현하는 자료형  
- 부동소수점(floating point) 방식으로 저장됨  
- 지수 표현(e 표기법)을 사용하여 매우 큰 숫자나 매우 작은 숫자도 표현 가능  
- 예제  

  ```{python}
  x = 3.14   # 일반적인 실수
  y = -2.71  # 음수 실수
  z = 1.2e3  # 1.2 × 10³ = 1200.0
  w = 5e-4   # 5 × 10⁻⁴ = 0.0005
  print(type(x))  # <class 'float'>
  ```

### 복소수형 (Complex Number, `complex`)  
- 수학에서 사용하는 복소수를 표현하는 자료형  
- 실수부(real)와 허수부(imag)로 구성됨  
- 허수부는 `j`를 사용하여 표현  
- 예제  

  ```{python}
  num1 = 3 + 4j  # 3 + 4i (수학에서의 허수 i를 j로 표현)
  num2 = -2 - 5j
  print(num1.real)  # 실수부: 3.0
  print(num1.imag)  # 허수부: 4.0
  print(type(num1)) # <class 'complex'>
  ```

### 형 변환 (Type Conversion)  
- 숫자형 간 변환이 가능하며, `int()`, `float()`, `complex()`를 사용함  
- 예제  

  ```{python}
  print(int(3.14))     # 3 (실수를 정수로 변환)
  print(float(5))      # 5.0 (정수를 실수로 변환)
  print(complex(2))    # (2+0j) (정수를 복소수로 변환)
  ```

### 숫자형과 관련된 내장 함수  

| 함수 | 설명 | 예제 |
|------|------|------|
| `abs(x)` | 절댓값 반환 | `abs(-5) → 5` |
| `round(x, n)` | 반올림 (소수점 n자리까지) | `round(3.14159, 2) → 3.14` |
| `pow(x, y)` | `x`의 `y`제곱 (거듭제곱) | `pow(2, 3) → 8` |
| `divmod(x, y)` | `(몫, 나머지)` 튜플 반환 | `divmod(10, 3) → (3, 1)` |

```{python}
print(abs(-7))        # 7
print(round(3.14159, 2)) # 3.14
print(pow(2, 3))      # 8
print(divmod(10, 3))  # (3, 1)
```
 
## 문자형 {#sec-string}

파이썬에서 **문자열(String, `str`)**은 **문자들의 연속된 집합**으로, 텍스트 데이터를 저장하는 자료형이다. 작은따옴표(`'`)나 큰따옴표(`"`)로 감싸서 표현한다.

### 문자열 생성  

```{python}
text1 = 'Hello'       # 작은따옴표 사용
text2 = "Python"      # 큰따옴표 사용
text3 = '''Hello'''   # 작은따옴표 세 개 사용
text4 = """Python"""  # 큰따옴표 세 개 사용

print(type(text1))  # <class 'str'>
```

- 작은따옴표와 큰따옴표는 동일하게 작동한다.
- 세 개의 따옴표(`'''` 또는 `"""`)는 **여러 줄 문자열**을 만들 때 사용한다.

```{python}
multi_line = """이것은
    여러 줄의
문자열입니다."""
print(multi_line)
```

### 문자열 인덱싱(Indexing)과 슬라이싱(Slicing)  

**문자열은 인덱스를 사용하여 개별 문자에 접근할 수 있다.**  **인덱스는 0부터 시작**하며, 음수 인덱스를 사용하면 뒤에서부터 접근 가능하다.  

#### 인덱싱

```{python}
text = "Python"
print(text[0])   # 'P'
print(text[-1])  # 'n' (뒤에서 첫 번째 문자)
```

#### 슬라이싱

```{python}
text = "Python"
print(text[0:4])  # 'Pyth' (0부터 3까지)
print(text[:3])   # 'Pyt' (처음부터 2까지)
print(text[2:])   # 'thon' (2부터 끝까지)
print(text[-4:-1])# 'tho' (뒤에서 4번째부터 뒤에서 2번째까지)
print(text[::-1]) # 'nohtyP' (문자열 뒤집기)
```

### 문자열 연산  

파이썬의 문자열은 **더하기(`+`)와 곱하기(`*`) 연산**을 지원한다.

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `+` | 문자열 연결 | `'Hello' + 'World' → 'HelloWorld'` |
| `*` | 문자열 반복 | `'Python' * 3 → 'PythonPythonPython'` |

```{python}
a = "Hello"
b = "World"
print(a + " " + b)  # "Hello World"

c = "Python"
print(c * 3)  # "PythonPythonPython"
```

### 문자열 길이 확인  

`len()` 함수를 사용하면 문자열의 길이를 확인할 수 있다.  

```{python}
text = "Hello Python"
print(len(text))  # 12
```

### 문자열 내장 함수  

문자열 조작을 위한 다양한 함수가 제공된다.  

| 함수 | 설명 | 예제 |
|------|------|------|
| `upper()` | 대문자로 변환 | `"hello".upper() → "HELLO"` |
| `lower()` | 소문자로 변환 | `"PYTHON".lower() → "python"` |
| `strip()` | 공백 제거 | `" hello ".strip() → "hello"` |
| `replace(a, b)` | 문자열 치환 | `"Hello".replace("H", "J") → "Jello"` |
| `split(sep)` | 문자열 분할 | `"a,b,c".split(",") → ['a', 'b', 'c']` |
| `join(iterable)` | 문자열 합치기 | `" ".join(['Hello', 'World']) → "Hello World"` |
| `find(sub)` | 문자열 찾기 (인덱스 반환) | `"Python".find("y") → 1` |
| `count(sub)` | 특정 문자 개수 세기 | `"banana".count("a") → 3` |
| `startswith(sub)` | 특정 문자열로 시작하는지 확인 | `"Python".startswith("Py") → True` |
| `endswith(sub)` | 특정 문자열로 끝나는지 확인 | `"Python".endswith("on") → True` |

```{python}
text = " hello python "
print(text.upper())    # " HELLO PYTHON "
print(text.strip())    # "hello python"
print(text.replace("python", "world"))  # " hello world "
print("apple,banana,grape".split(","))  # ['apple', 'banana', 'grape']
print("-".join(["2025", "01", "30"]))   # "2025-01-30"
print("banana".count("a"))  # 3
```

### 문자열 포맷팅 (Formatting)  

문자열 안에 **변수를 삽입하는 방법**으로 `f-문자열`, `format()`, `%` 기법이 있다.

#### `f-문자열` (Python 3.6 이상)

```{python}
name = "Alice"
age = 25
print(f"이름: {name}, 나이: {age}")  # "이름: Alice, 나이: 25"
```

#### `format()` 사용

```{python}
name = "Alice"
age = 25
print("이름: {}, 나이: {}".format(name, age))  # "이름: Alice, 나이: 25"
print("이름: {0}, 나이: {1}".format(name, age))  # "이름: Alice, 나이: 25"
```

#### `%` 기법 (옛날 방식)

```{python}
name = "Alice"
age = 25
print("이름: %s, 나이: %d" % (name, age))  # "이름: Alice, 나이: 25"
```

### 문자열 비교  

파이썬에서는 문자열을 **사전 순서(ASCII 값 기준)**로 비교한다.  

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `==` | 문자열이 같은지 비교 | `"apple" == "apple" → True` |
| `!=` | 문자열이 다른지 비교 | `"apple" != "banana" → True` |
| `<`, `>` | 사전순 비교 | `"apple" < "banana" → True` |

```{python}
print("apple" == "apple")  # True
print("apple" != "banana") # True
print("apple" < "banana")  # True (사전순 비교)
print("Zebra" > "apple")   # False ('Z'의 ASCII 값이 'a'보다 작음)
```

### 문자열을 숫자로 변환  

`int()`, `float()`를 사용하면 문자열을 숫자로 변환할 수 있다.  

```{python}
num_str = "100"
print(int(num_str) + 5)  # 105 (문자열 → 정수)

float_str = "3.14"
print(float(float_str) * 2)  # 6.28 (문자열 → 실수)
```

문자열 관련 내용을 정리하면 다음과 같다.

| 개념 | 설명 | 예제 |
|------|------|------|
| **문자열 생성** | 작은따옴표 또는 큰따옴표 사용 | `'Hello'`, `"Python"` |
| **인덱싱** | 특정 문자 접근 | `"Python"[0] → 'P'` |
| **슬라이싱** | 문자열 일부 가져오기 | `"Python"[1:4] → 'yth'` |
| **연산** | `+` (연결), `*` (반복) | `"Hello" + "World"`, `"Hi" * 3` |
| **내장 함수** | 문자열 조작 | `"hello".upper()`, `"text".replace("t", "T")` |
| **포맷팅** | 변수 포함 | `f"이름: {name}"`, `"이름: {}".format(name)` |
| **비교** | 문자열 비교 | `"apple" < "banana" → True` |
: {tbl-colwidths="[20,40,40]"}

파이썬의 문자열은 **변경할 수 없는(Immutable) 객체**이지만, 다양한 함수와 연산을 활용하여 쉽게 다룰 수 있다.

## 논리형 {#sec-boolean}

파이썬에서 **불리언(Boolean, `bool`)** 자료형은 **참(`True`)과 거짓(`False`)을 표현하는 데이터 타입**이다.  

### 불리언 값과 생성  

`True` 또는 `False` 값을 가지며, 첫 글자는 반드시 대문자로 작성한다(`true`, `false`는 오류 발생)  .

```{python}
a = True
b = False
print(type(a))  # <class 'bool'>
print(type(b))  # <class 'bool'>
```

### 불리언 연산  

**논리 연산자(`and`, `or`, `not`)**를 사용하여 조합 가능하다.

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `and` | 두 값이 모두 참이면 `True` | `True and True → True` |
| `or` | 하나라도 참이면 `True` | `True or False → True` |
| `not` | 값을 반대로 변환 | `not True → False` |

```{python}
print(True and False)  # False
print(True or False)   # True
print(not True)        # False
```

### 불리언과 숫자 변환  
`True`는 `1`, `False`는 `0`과 동일하게 동작한다. `int()`와 `bool()`을 사용하여 변환 가능하다.  

```{python}
print(int(True))   # 1
print(int(False))  # 0
print(bool(1))     # True
print(bool(0))     # False
```

### `bool()`을 사용한 참/거짓 판별  
아래 값들은 **False**로 간주된다.

  - `0`
  - `0.0`
  - `''` (빈 문자열)
  - `None`
  - `[]` (빈 리스트)
  - `{}` (빈 딕셔너리)
  - `set()` (빈 집합)

```{python}
print(bool(0))       # False
print(bool(0.0))     # False
print(bool(""))      # False
print(bool([]))      # False
print(bool(None))    # False
print(bool("Python"))  # True (문자가 있으면 True)
print(bool([1, 2, 3]))  # True (리스트에 요소가 있으면 True)
```

불리언 자료형은 **조건문 (`if`), 반복문 (`while`), 논리 연산** 등에 널리 사용된다.

## 연산자

파이썬에서는 `산술`, `비교`, `논리`, `대입` 등과 같은 연산자를 제공한다.

### 산술

파이썬에서 **산술 연산자**는 숫자 값을 계산하는 연산자이다. 기본적인 사칙연산뿐만 아니라 나머지 연산, 거듭제곱 연산, 몫 연산도 제공한다.  

#### 산술 연산자 종류  

| 연산자 | 설명 | 예제 | 결과 |
|--------|------|------|------|
| `+` | 덧셈 | `10 + 5` | `15` |
| `-` | 뺄셈 | `10 - 5` | `5` |
| `*` | 곱셈 | `10 * 5` | `50` |
| `/` | 나눗셈 (소수점 포함) | `10 / 3` | `3.3333` |
| `//` | 몫 연산 (정수 나눗셈) | `10 // 3` | `3` |
| `%` | 나머지 연산 | `10 % 3` | `1` |
| `**` | 거듭제곱 | `2 ** 3` | `8` |

#### 덧셈(`+`)과 뺄셈(`-`)

```{python}
a = 10
b = 5
print(a + b)  # 15
print(a - b)  # 5
```

#### 곱셈(`*`)과 나눗셈(`/`)

```{python}
x = 10
y = 3
print(x * y)  # 30
print(x / y)  # 3.3333333333333335 (소수 포함)
```

```{python}
#| error: true

x = 10
y = 0
print(x / y)  # ZeroDivisionError
```

#### 몫 연산(`//`)

결과값이 **정수**로 반환된다(소수점 이하 버림).

```{python}
print(10 // 3)  # 3
print(-10 // 3) # -4 (음수는 반올림이 아니라 내림)
```

####  연산(`%`)

```{python}
print(10 % 3)  # 1
print(15 % 4)  # 3
```

#### 거듭제곱(`**`)

```{python}
print(2 ** 3)  # 8 (2의 3제곱)
print(5 ** 2)  # 25 (5의 제곱)
print(9 ** 0.5) # 3.0 (제곱근)
```

---

#### 산술 연산과 자료형  
`int`와 `float`이 함께 연산되면 결과는 `float`이 된다.  

```{python}
print(5 + 2.5)  # 7.5 (int + float = float)
print(10 / 2)   # 5.0 (나눗셈 결과는 항상 float)
```

#### 연산자 우선순위  
파이썬의 산술 연산자는 **수학과 동일한 우선순위**를 따른다. 우선순위가 높을수록 먼저 계산된다.  

| 연산자 | 우선순위 (높음 → 낮음) |
|--------|------------------|
| `**` | 거듭제곱 |
| `*`, `/`, `//`, `%` | 곱셈, 나눗셈, 몫, 나머지 |
| `+`, `-` | 덧셈, 뺄셈 |

```{python}
print(2 + 3 * 4)     # 14 (* 먼저 계산)
print((2 + 3) * 4)   # 20 (괄호 안 먼저 계산)
print(2 ** 3 * 4)    # 32 (** 먼저 계산)
```

우선 순위가 있는 연산시 혼동을 피하기 위해 괄로로 묶어 계산한다.

### 비교

파이썬에서 비교 연산자는 두 값을 비교하고 `True` 또는 `False`를 반환하는 연산자이다.

### 비교 연산자 종류 

| 연산자 | 의미 | 설명 | 예제 | 결과 |
|--------|------|------|------|------|
| `==` | 같음 | 두 값이 같으면 `True`, 다르면 `False` | `5 == 5` | `True` |
| `!=` | 다름 | 두 값이 다르면 `True`, 같으면 `False` | `5 != 3` | `True` |
| `<` | 작음 | 왼쪽 값이 오른쪽 값보다 작으면 `True` | `3 < 5` | `True` |
| `>` | 큼 | 왼쪽 값이 오른쪽 값보다 크면 `True` | `5 > 3` | `True` |
| `<=` | 작거나 같음 | 왼쪽 값이 오른쪽 값보다 작거나 같으면 `True` | `5 <= 5` | `True` |
| `>=` | 크거나 같음 | 왼쪽 값이 오른쪽 값보다 크거나 같으면 `True` | `5 >= 3` | `True` |



- `==` (같음)  
  : 두 값이 같으면 `True`, 다르면 `False`를 반환한다.
  
  ```{python}
  print(5 == 5)  # True
  print(5 == 3)  # False
  ```  

- `!=` (다름)  
  : 두 값이 다르면 `True`, 같으면 `False`를 반환한다. 
  
  ```{python}
  print(5 != 3)  # True
  print(5 != 5)  # False
  ```  

- `<` (작음)  
  : 왼쪽 값이 오른쪽 값보다 작으면 `True`, 크거나 같으면 `False`를 반환한다.  
  
  ```{python}
  print(3 < 5)  # True
  print(5 < 5)  # False
  ```  

- `>` (큼)  
  : 왼쪽 값이 오른쪽 값보다 크면 `True`, 작거나 같으면 `False`를 반환한다.  
  
  ```{python}
  print(5 > 3)  # True
  print(5 > 5)  # False
  ```  

- `<=` (작거나 같음)  
  : 왼쪽 값이 오른쪽 값보다 작거나 같으면 `True`, 크면 `False`를 반환한다.  
  
  ```{python}
  print(3 <= 5)  # True
  print(5 <= 5)  # True
  print(6 <= 5)  # False
  ```  

- `>=` (크거나 같음)  
  : 왼쪽 값이 오른쪽 값보다 크거나 같으면 `True`, 작으면 `False`를 반환한다.  
  
  ```{python}
  print(5 >= 3)  # True
  print(5 >= 5)  # True
  print(3 >= 5)  # False
  ```  

### 비교 연산자의 특징  

- **문자열 비교**  
  : 문자열도 비교 연산자로 비교할 수 있으며, **사전 순서(ASCII 코드 값)** 에 따라 결과가 결정된다. 
  
  ```{python}
  print("apple" < "banana")  # True ("a"가 "b"보다 앞에 있음)
  print("abc" < "abcd")  # True (문자 수가 적은 것이 더 작음)
  ```  

- **논리값 비교**  
  : `True`는 `1`, `False`는 `0`과 동등하게 취급된다. 
  
  ```{python}
  print(True == 1)  # True
  print(False == 0)  # True
  print(True > False)  # True (1 > 0)
  ```  

- **비교 연산자 연쇄 사용 (Chaining)**  
  : 여러 개의 비교 연산자를 연결하여 사용할 수 있다.  
  
  ```{python}
  x = 5
  print(3 < x < 10)  # True (3 < 5 and 5 < 10)
  print(3 < x > 2)  # True (3 < 5 and 5 > 2)
  ```  

비교 연산자는 조건문, 반복문, 필터링 등의 다양한 상황에서 활용된다.

### 논리

### 대입

### 기타 연산자

- 멤버 연산자

## 주석 사용법

### 한줄 주석

### 여러 줄 주석
