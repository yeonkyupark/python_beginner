## 저장장치

데이터 저장은 일반적으로 저장장치계층에 따라 CPU, 메모리(RAM), 저장장치(HDD, SSD 등)을 이용한다. 이중 프로그래밍에 있어 밀접한 관련이 있는 저장소는 메모리(RAM)이다.

![저장장치 계층 구조](images/cpuramrom.jpg)


| **구분**         | **컴퓨터 저장 장치 (RAM)**                                  | **프로그래밍 언어의 변수**                              |
|----------------|-----------------------------------------------------------|----------------------------------------------------|
| **역할**         | **데이터를 임시로 저장**하여 CPU가 빠르게 접근할 수 있도록 함         | 특정 데이터를 저장하기 위해 **이름(참조)**을 붙여서 관리 |
| **데이터 저장 위치** | **메모리 주소(숫자 형태)**로 데이터를 저장함                        | 변수 이름을 통해 **메모리 주소**를 간접적으로 참조함       |
| **접근 방식**     | CPU가 **메모리 주소**를 이용해 데이터에 직접 접근                  | 프로그래머는 **변수 이름**으로 데이터를 쉽게 접근 및 수정 |
| **예시**         | 메모리 주소 `0x7ffeefbff4c0`에 값 `10` 저장                    | 변수 `x = 10` → `x`는 내부적으로 메모리 주소에 연결됨    |
: 메모리와 변수 관계


변수와 메모리 동작 과정
: 1. **변수 선언**: 프로그래머가 변수를 선언하면, 컴퓨터는 **RAM의 빈 공간(메모리 주소)**에 데이터를 저장  
2. **변수 참조**: 변수 이름을 사용하면, 프로그램은 해당 변수에 연결된 **메모리 주소를 참조**하여 값을 읽거나 수정  
3. **변수 값 변경**: 변수를 통해 값을 변경하면, **같은 메모리 주소의 데이터**가 갱신됨


## 변수와 상수 

변수, 상수는 프로그래밍에서 데이터를 저장하고 관리하는 개념이다. 


### 변수  

![https://pixabay.com/ko/](https://cdn.pixabay.com/photo/2013/07/12/12/44/file-cabinet-146158_1280.png)

변수란 값을 변경할 수 있는 저장 공간에 붙여 높은 이름(태그, 주소 등)을 말한다. 이 변수를 통해 데이터를 쉽게 읽고 수정할 수 있다.

- 프로그램에서 데이터를 저장하고 변경할 수 있는 공간  
- 특정한 값이 할당되며, 필요에 따라 변경할 수 있음  
- 선언 시 변수명을 사용하여 값을 저장하고 참조함  

### 상수  

상수란 값을 변경할 수 없는 저장 공간을 말한다.

- 한 번 할당되면 변경할 수 없는 값  
- 프로그램이 실행되는 동안 값이 유지됨  
- 일반적으로 `const`, `final` 등의 키워드를 사용하여 선언함 (@sec-const-keyword 참고) 

### 리터럴  

저장 공간에 실제 저장하는 값을 말한다.

- 프로그램에서 직접 사용하는 고정된 값  
- 변수나 상수에 할당되는 실제 데이터 값  
- 숫자, 문자열, 불리언, 배열 등 다양한 형태가 있음  

아래는 파이썬 예제이다.

```{python}
# 변수
x = 10  
y = "Hello"

# 상수 (Python에서는 관례적으로 대문자로 작성)
PI = 3.14159  

# 리터럴
print(100)       # 정수 리터럴
print(3.14)      # 실수 리터럴
print("Python")  # 문자열 리터럴
```

파이썬에서는 상수를 만드는 "const"와 같은 키워드를 제공하지 않는다. 관례적으로 상수인 경우 변수명을 대문자로 작성한다(개발자간 암묵적인 규칙).

## 자료형 {#sec-datatype}

자료형은 **데이터의 종류를 나타내는 것**이다. 프로그래밍에서 데이터를 다룰 때, 컴퓨터가 그 데이터의 성격을 이해할 수 있도록 자료형을 사용한다.


### 자료형의 역할

- 데이터를 어떻게 저장하고 처리할지 결정한다.
- 허용되는 연산을 정의한다.


### 파이썬에서 주요 자료형

```{mermaid}
graph LR
    A[Python Data Types] --> B[Numeric Types]
    A --> C[Sequence Types]
    A --> D[Mapping Type]
    A --> E[Set Types]
    A --> F[Boolean Type]
    A --> G[None Type]
    A --> H[Binary Types]
    
    B --> B1[int]
    B --> B2[float]
    B --> B3[complex]
    
    C --> C1[list]
    C --> C2[tuple]
    C --> C3[range]
    C --> C4[str]
    
    D --> D1[dict]
    
    E --> E1[set]
    E --> E2[frozenset]
    
    F --> F1[bool]
    
    G --> G1[NoneType]
    
    H --> H1[bytes]
    H --> H2[bytearray]
    H --> H3[memoryview]
```

1. **숫자형 (Number)**  
   - 정수, 실수, 복소수를 포함한다.
   - 예: `10`(정수), `3.14`(실수)

2. **문자열 (String)**  
   - 문자나 단어를 묶어놓은 데이터.
   - 예: `"안녕하세요"`, `'Python'`

3. **불리언 (Boolean)**  
   - 참(`True`)과 거짓(`False`)만을 표현하는 자료형.
   - 예: `True`, `False`

4. **리스트 (List)**  
   - 여러 개의 값을 순서대로 저장하는 자료형.
   - 예: `[1, 2, 3]`, `["a", "b", "c"]`

5. **튜플 (Tuple)**  
   - 리스트와 비슷하지만, 값이 변경되지 않는다.
   - 예: `(1, 2, 3)`

6. **딕셔너리 (Dictionary)**  
   - 키(key)와 값(value)을 쌍으로 저장하는 자료형.
   - 예: `{"이름": "철수", "나이": 20}`

7. **집합 (Set)**  
   - 중복 없는 값을 저장하는 자료형.
   - 예: `{1, 2, 3}`

### 자료형의 예제

```{python}
# 숫자형
x = 10
y = 3.14

# 문자열
name = "Python"

# 논리값(불리언)
is_valid = True

# 리스트
numbers = [1, 2, 3]

# 튜플
coordinates = (10, 20)

# 딕셔너리
person = {"name": "Alice", "age": 25}

# 집합
unique_numbers = {1, 2, 3, 4}
```

쉽게 기억하는 법
: - **숫자**: 계산할 수 있는 데이터  
- **문자열**: 글자나 단어를 표현  
- **리스트/튜플**: 여러 개의 데이터를 하나로 묶기  
- **딕셔너리**: "단어: 뜻"처럼 짝지어진 데이터  
- **불리언**: 맞다/틀리다(True/False)로 답하는 데이터  


## 숫자형 {#sec-numeric}

파이썬에서 숫자형 자료형은 **숫자를 저장하고 연산할 수 있는 데이터 타입**이다. 크게 **정수형, 실수형, 복소수형**으로 나뉜다.

### 정수형  

정수형(Integer, `int`) ..., -1, 0, 1, ...과 같이 정수를 표현하는 자료형이다.

- 소수점이 없는 정수 값을 저장하는 자료형  
- 크기의 제한 없이 매우 큰 정수도 표현 가능  
- 양수, 음수, 0을 포함  

예제 
:  
```{python}
a = 10   # 양의 정수
b = -5   # 음의 정수
c = 0    # 0도 정수
d = 999999999999999999999  # 매우 큰 정수도 가능
print(type(a))  # <class 'int'>
```

### 실수형   

실수형(Floating Point, `float`)은 실수를 표현하는 자료형이다.

- 소수점이 있는 숫자를 표현하는 자료형  
- 부동소수점(floating point) 방식으로 저장됨  
- 지수 표현(e 표기법)을 사용하여 매우 큰 숫자나 매우 작은 숫자도 표현 가능  

예제  
:
```{python}
x = 3.14   # 일반적인 실수
y = -2.71  # 음수 실수
z = 1.2e3  # 1.2 × 10^3 = 1200.0
w = 5e-4   # 5 × 10^(-4) = 0.0005
print(type(x))  # <class 'float'>
```

### 복소수형   

복소수형(Complex Number, `complex`)은 복소수를 표현하는 자료형이다.

- 수학에서 사용하는 복소수를 표현하는 자료형  
- 실수부(real)와 허수부(imag)로 구성됨  
- 허수부는 `j`를 사용하여 표현  

예제  
:  
```{python}
num1 = 3 + 4j  # 3 + 4i (수학에서의 허수 i를 j로 표현)
num2 = -2 - 5j
print(num1.real)  # 실수부: 3.0
```

```{python}
print(num1.imag)  # 허수부: 4.0
```

```{python} 
print(type(num1)) # <class 'complex'>
```

### 형 변환 (Type Conversion)  

숫자형 간 변환이 가능하며, `int()`, `float()`, `complex()`를 사용한다.

예제  
:  
```{python}
print(int(3.14))     # 3 (실수를 정수로 변환)
```

```{python} 
print(float(5))      # 5.0 (정수를 실수로 변환)
```

```{python} 
print(complex(2))    # (2+0j) (정수를 복소수로 변환)
```

### 숫자형과 관련된 내장 함수  

숫자형과 관련된 내장함수 예이다.

| 함수 | 설명 | 예제 |
|------|------|------|
| `abs(x)` | 절댓값 반환 | `abs(-5) → 5` |
| `round(x, n)` | 반올림 (소수점 n자리까지) | `round(3.14159, 2) → 3.14` |
| `pow(x, y)` | `x`의 `y`제곱 (거듭제곱) | `pow(2, 3) → 8` |
| `divmod(x, y)` | `(몫, 나머지)` 튜플 반환 | `divmod(10, 3) → (3, 1)` |
: 숫자형 관련 내장 함수

```{python}
print(abs(-7))        # 7t
```

```{python}
print(round(3.14159, 2)) # 3.14
```

```{python} 
print(pow(2, 3))      # 8
```

```{python} 
print(divmod(10, 3))  # (3, 1)
```
 
## 문자형 {#sec-string}

파이썬에서 **문자열(String, `str`)**은 **문자들의 연속된 집합**으로, 텍스트 데이터를 저장하는 자료형이다. 작은따옴표(`'`)나 큰따옴표(`"`)로 감싸서 표현한다.

### 문자열 생성  

문자열은 따옴표를 사용하여 생성할 수 있다.

```{python}
text1 = 'Hello'       # 작은따옴표 사용
text2 = "Python"      # 큰따옴표 사용
text3 = '''Hello'''   # 작은따옴표 세 개 사용
text4 = """Python"""  # 큰따옴표 세 개 사용

print(type(text1))  # <class 'str'>
```

- 작은따옴표와 큰따옴표는 동일
- 세 개의 따옴표(`'''` 또는 `"""`)는 **여러 줄 문자열**을 만들 때 사용

```{python}
multi_line = """이것은
    여러 줄의
문자열입니다."""
print(multi_line)
```

### 문자열 인덱싱과 슬라이싱

**문자열은 인덱스를 사용하여 개별 문자에 접근할 수 있다**(인덱싱). **인덱스는 0부터 시작**하며, 음수 인덱스를 사용하면 뒤에서부터 접근 가능하다.  

#### 인덱싱

![인덱싱](images/string_indexing.png)

```{python}
text = "Python"
print(text[0])   # 'P'
```

```{python} 
print(text[-1])  # 'n' (뒤에서 첫 번째 문자)
```

#### 슬라이싱

![슬라이싱](images/string_slicing.png)

```{python}
text = "Python"
print(text[0:4])  # 'Pyth' (0부터 3까지)
```

```{python} 
print(text[:3])   # 'Pyt' (처음부터 2까지)
```

```{python}  
print(text[2:])   # 'thon' (2부터 끝까지)
```

```{python} 
print(text[-4:-1])# 'tho' (뒤에서 4번째부터 뒤에서 2번째까지)
```

```{python}  
print(text[::-1]) # 'nohtyP' (문자열 뒤집기)
```

### 문자열 연산  

파이썬의 문자열은 **더하기(`+`)와 곱하기(`*`) 연산**을 지원한다.

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `+` | 문자열 연결 | `'Hello' + 'World' → 'HelloWorld'` |
| `*` | 문자열 반복 | `'Python' * 3 → 'PythonPythonPython'` |
: 문자열 연산자

```{python}
a = "Hello"
b = "World"
print(a + " " + b)  # "Hello World"
```

```{python} 
c = "Python"
print(c * 3)  # "PythonPythonPython"
```

### 문자열 길이 확인  

`len()` 함수를 사용하면 문자열의 길이를 확인할 수 있다.  

```{python}
text = "Hello Python"
print(len(text))  # 12
```

### 문자열 내장 함수  

파이썬에선 문자열 조작을 위한 다양한 함수가 제공된다.  

| 함수 | 설명 | 예제 |
|------|------|------|
| `upper()` | 대문자로 변환 | `"hello".upper() → "HELLO"` |
| `lower()` | 소문자로 변환 | `"PYTHON".lower() → "python"` |
| `strip()` | 공백 제거 | `" hello ".strip() → "hello"` |
| `replace(a, b)` | 문자열 치환 | `"Hello".replace("H", "J") → "Jello"` |
| `split(sep)` | 문자열 분할 | `"a,b,c".split(",") → ['a', 'b', 'c']` |
| `join(iterable)` | 문자열 합치기 | `" ".join(['Hello', 'World']) → "Hello World"` |
| `find(sub)` | 문자열 찾기 (인덱스 반환) | `"Python".find("y") → 1` |
| `count(sub)` | 특정 문자 개수 세기 | `"banana".count("a") → 3` |
| `startswith(sub)` | 특정 문자열로 시작하는지 확인 | `"Python".startswith("Py") → True` |
| `endswith(sub)` | 특정 문자열로 끝나는지 확인 | `"Python".endswith("on") → True` |

```{python}
text = " hello python "
print(text.upper())    # " HELLO PYTHON "
```

```{python} 
print(text.strip())    # "hello python"
```

```{python} 
print(text.replace("python", "world"))  # " hello world "
```

```{python}  
print("apple,banana,grape".split(","))  # ['apple', 'banana', 'grape']
```

```{python}  
print("-".join(["2025", "01", "30"]))   # "2025-01-30"
```

```{python}  
print("banana".count("a"))  # 3
```

### 문자열 포맷팅 (Formatting)  

파이썬에서 문자열 포맷팅은 변수 값을 문자열에 삽입하는 방법이다. 여러 가지 방식으로 문자열을 포맷할 수 있으며, 각 방식은 특정한 사용 사례에 따라 적합하다. 아래는 파이썬에서 문자열 포맷팅을 위한 주요 방법들이다.

#### % 포맷팅 
이 방식(구식 방식)은 C 언어 스타일의 포맷팅으로, 문자열 안에 `%` 기호를 사용하여 변수를 삽입한다.

```{python}
name = "Alice"
age = 30
result = "Name: %s, Age: %d" % (name, age)
print(result)
```

- `%s`: 문자열 삽입
- `%d`: 정수 삽입
- `%f`: 부동소수점 숫자 삽입

#### str.format()   
`str.format()`은 더 직관적인 방식(중간 방식)으로, `{}` 플레이스홀더를 사용하여 변수 값을 삽입한다. 포맷팅할 자리에 `{}`를 넣고, `format()` 메서드 안에 변수 값을 전달한다.

```{python}
name = "Alice"
age = 30
result = "Name: {}, Age: {}".format(name, age)
print(result)
```

#### 위치 인자와 키워드 인자 사용

```{python}
result = "Name: {0}, Age: {1}".format(name, age)
print(result)  # 출력: Name: Alice, Age: 30
```

```{python} 
result = "Name: {name}, Age: {age}".format(name="Alice", age=30)
print(result)
```

#### f-strings    
f-string은 가장 최신의 방식(Python 3.6 이상)으로, 문자열 앞에 `f`를 붙이고, 중괄호 `{}` 안에 변수나 표현식을 직접 삽입하는 방법이다. 가독성이 좋고 성능도 우수하다.

```{python}
name = "Alice"
age = 30
result = f"Name: {name}, Age: {age}"
print(result)  # 출력: Name: Alice, Age: 30
```

표현식 삽입
: - f-string에서는 변수뿐만 아니라 **표현식**도 바로 삽입 가능

```{python}
x = 5
result = f"5 * 2 = {x * 2}"
print(result)  # 출력: 5 * 2 = 10
```

| 방식             | 설명                                  | 장점                   | 단점                 |
|------------------|---------------------------------------|------------------------|----------------------|
| `%` 포맷팅       | C 스타일 포맷팅                       | 간단하고 직관적        | 가독성이 떨어짐      |
| `str.format()`    | `{}`와 `format()` 메서드 사용         | 위치 인자, 키워드 인자 지원 | 비교적 오래된 방식    |
| f-strings        | `f"{}"`를 사용하여 변수를 직접 삽입   | 가독성, 성능, 간결함  | Python 3.6 이상만 지원 |
: 각 방식의 장단점

- **가장 최신의 방식은 f-string**이다. Python 3.6 이상에서 사용할 수 있으며, 성능과 가독성이 뛰어나 대부분의 경우 이 방식을 사용
- **`str.format()`**은 여전히 유용하지만, 최신 코드에서는 f-string으로 대체
- **`%` 포맷팅**은 구식 방식이며, 가독성 및 유지보수 측면에서 추천되지 않음


### 문자열 비교  

파이썬에서는 문자열을 **사전 순서(ASCII[^ascii] 값 기준)**로 비교한다.  

[^ascii]: [https://ko.wikipedia.org/wiki/ASCII](https://ko.wikipedia.org/wiki/ASCII){target="_blank"}

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `==` | 문자열이 같은지 비교 | `"apple" == "apple" → True` |
| `!=` | 문자열이 다른지 비교 | `"apple" != "banana" → True` |
| `<`, `>` | 사전순 비교 | `"apple" < "banana" → True` |

```{python}
print("apple" == "apple")  # True
```

```{python}  
print("apple" != "banana") # True
```

```{python} 
print("apple" < "banana")  # True (사전순 비교)
```

```{python}  
print("Zebra" > "apple")   # False ('Z'의 ASCII 값이 'a'보다 작음)
```

::: {#nte-ascii .callout-note icon=false title="`a`가 `A`보다 큰 이유"}

파이썬에서 문자 `'a'`가 `'A'`보다 큰 이유는 **문자의 내부 코드 값(ASCII 또는 유니코드)** 때문이다.  

- **소문자**는 **대문자**보다 **큰 숫자 값**을 가지므로, 파이썬에서 `'a' > 'A'`는 **참(True)**으로 평가됨

ASCII 코드란?  
: - **문자를 숫자로 변환**하는 표준 체계로, 컴퓨터가 문자를 이해할 수 있도록 **숫자 코드**로 저장함.  
- **'A'**의 ASCII 값: **65**  
- **'a'**의 ASCII 값: **97**

파이썬 코드로 확인하기
:  
```{python}
# ord() 함수로 문자에 해당하는 숫자 코드(ASCII 값)를 확인
uppercase_A = ord('A')
lowercase_a = ord('a')

print(f"'A'의 ASCII 값: {uppercase_A}")  # 65
print(f"'a'의 ASCII 값: {lowercase_a}")  # 97

# 비교 결과 확인
print(f"'a' > 'A' 결과: {'a' > 'A'}")  # True
```

정리하면 다음과 같다.

- 파이썬은 문자를 비교할 때 **문자 내부의 숫자 값(ASCII/유니코드)**을 기준으로 비교함  
- 따라서 **소문자**의 코드 값이 **대문자**보다 크기 때문에, `'a' > 'A'`는 **True**가 됨

:::

### 문자열을 숫자로 변환  

`int()`, `float()`를 사용하면 문자열을 숫자로 변환할 수 있다.  

```{python}
num_str = "100"
print(int(num_str) + 5)  # 105 (문자열 → 정수)
```

```{python}  
float_str = "3.14"
print(float(float_str) * 2)  # 6.28 (문자열 → 실수)
```

문자열 관련 내용을 정리하면 다음과 같다.

| 개념 | 설명 | 예제 |
|------|------|------|
| **문자열 생성** | 작은따옴표 또는 큰따옴표 사용 | `'Hello'`, `"Python"` |
| **인덱싱** | 특정 문자 접근 | `"Python"[0] → 'P'` |
| **슬라이싱** | 문자열 일부 가져오기 | `"Python"[1:4] → 'yth'` |
| **연산** | `+` (연결), `*` (반복) | `"Hello" + "World"`, `"Hi" * 3` |
| **내장 함수** | 문자열 조작 | `"hello".upper()`, `"text".replace("t", "T")` |
| **포맷팅** | 변수 포함 | `f"이름: {name}"`, `"이름: {}".format(name)` |
| **비교** | 문자열 비교 | `"apple" < "banana" → True` |
: {tbl-colwidths="[20,40,40]"}

파이썬의 문자열은 **변경할 수 없는(Immutable) 객체** (@sec-mutable-immutable 참고)이지만, 다양한 함수와 연산을 활용하여 쉽게 다룰 수 있다.

## 논리형 {#sec-boolean}

파이썬에서 **불리언(Boolean, `bool`)** 자료형은 **참(`True`)과 거짓(`False`)을 표현하는 데이터 타입**이다.  

### 불리언 값과 생성  

`True` 또는 `False` 값을 가지며, 첫 글자는 반드시 대문자로 작성한다(`true`, `false`는 오류 발생).

```{python}
a = True
b = False
print(type(a))  # <class 'bool'>
print(type(b))  # <class 'bool'>
```

### 불리언 연산  

**논리 연산자(`and`, `or`, `not`)**를 사용하여 조합 가능하다.

AND (논리곱)
: - `AND` 연산은 두 값이 모두 `True`일 때만 결과가 `True`가 된다.

| A     | B     | A AND B |
|-------|-------|---------|
| False | False | False   |
| False | True  | False   |
| True  | False | False   |
| True  | True  | True    |

OR (논리합)
: - `OR` 연산은 두 값 중 하나라도 `True`일 때 결과가 `True`가 된다.

| A     | B     | A OR B  |
|-------|-------|---------|
| False | False | False   |
| False | True  | True    |
| True  | False | True    |
| True  | True  | True    |

NOT (부정)
: - `NOT` 연산은 입력 값이 `True`이면 `False`로, `False`이면 `True`로 바꾼다.

| A     | NOT A  |
|-------|--------|
| False | True   |
| True  | False  |

이 표들은 **불리언 논리**에서 사용하는 기본적인 연산들로, 프로그래밍에서 조건문이나 제어 흐름을 처리할 때 자주 사용된다.

| 연산자 | 설명 | 예제 |
|--------|------|------|
| `and` | 두 값이 모두 참이면 `True` | `True and True → True` |
| `or` | 하나라도 참이면 `True` | `True or False → True` |
| `not` | 값을 반대로 변환 | `not True → False` |
: 파이썬 논리 연산자

```{python}
print(True and False)  # False
```

```{python}  
print(True or False)   # True
```

```{python}  
print(not True)        # False
```

### 불리언과 숫자 변환  
`True`는 `1`, `False`는 `0`과 동일하게 동작한다. `int()`와 `bool()`을 사용하여 변환 가능하다.  

```{python}
print(int(True))   # 1
```

```{python}  
print(int(False))  # 0
```

```{python}  
print(bool(1))     # True
```

```{python}  
print(bool(0))     # False
```

### 참/거짓 판별  

`bool()` 함수를 사용해 참과 거짓을 판별할 수 있다. 아래 값들은 **False**(거짓)로 간주된다.

  - `0`
  - `0.0`
  - `''` (빈 문자열)
  - `None`
  - `[]` (빈 리스트)
  - `{}` (빈 딕셔너리)
  - `set()` (빈 집합)

```{python}
print(bool(0))       # False
```

```{python}  
print(bool(0.0))     # False
```

```{python}  
print(bool(""))      # False
```

```{python}  
print(bool([]))      # False
```

```{python}  
print(bool(None))    # False
```

```{python}   
print(bool("Python"))  # True (문자가 있으면 True)
```

```{python}  
print(bool([1, 2, 3]))  # True (리스트에 요소가 있으면 True)
```

불리언 자료형은 **조건문 (`if`), 반복문 (`while`), 논리 연산** 등에 널리 사용된다.
