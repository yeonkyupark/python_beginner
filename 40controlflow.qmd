---
title: "제어문"
format: html
---

파이썬에서 **제어문(Control Statements)**은 프로그램의 흐름을 제어하는 명령어로, **조건문(Conditional Statements)**과 **반복문(Loop Statements)**이 있다. 이를 통해 프로그램이 특정 조건을 만족할 때 실행되거나, 특정 동작을 반복하도록 만들 수 있다.

| 제어문 유형 | 설명 및 사용 예시 |
|------------|----------------|
| **조건문** | `if`, `elif`, `else`를 사용하여 조건에 따라 코드 실행 |
| **반복문** | `for`, `while`을 사용하여 반복 작업 수행 |
| **break**  | 특정 조건에서 반복문 강제 종료 |
| **continue** | 특정 조건에서 현재 반복을 건너뛰고 다음 반복 실행 |
| **pass** | 실행할 코드가 없을 때 사용 |
| **else (반복문과 함께 사용)** | 반복문이 정상 종료되면 실행 (`break` 시 실행 안 됨) |

제어문을 적절히 활용하면 프로그램의 흐름을 효과적으로 제어할 수 있다.

## 조건문

조건문은 주어진 조건에 따라 특정 코드블록을 실행할 수 있도록 제어한다.

### if문

`if`문은 **주어진 조건이 참(`True`)일 때 특정 코드 블록을 실행**하는 조건문이다. 프로그램의 흐름을 제어할 때 필수적으로 사용되며, `if`, `elif`, `else` 키워드를 활용하여 다양한 조건을 설정할 수 있다.

| 기능 | 코드 예시 |
|------|---------|
| 기본 `if` 문 | `if x > 5: print("x는 5보다 크다")` |
| `if-else` | `if x > 5: ... else: ...` |
| `if-elif-else` | `if x > 10: ... elif x > 5: ... else: ...` |
| 중첩 `if` | `if x > 10: if x > 20: ...` |
| 논리 연산자 | `if x > 5 and x < 10: ...` |
| 비교 연산자 연속 사용 | `if 5 < x < 10: ...` |
| `in`, `not in` | `if "apple" in fruits: ...` |
| 삼항 연산자 | `result = "참" if x > 5 else "거짓"` |
| `is`와 `==` 비교 | `if a is b: ...` |

`if`문을 활용하면 프로그램이 입력값에 따라 **다양한 동작을 수행**할 수 있다. 논리 연산자, 비교 연산자, `in` 등의 기능과 조합하면 더욱 유용하게 사용할 수 있다.

#### 기본 if 문

`if`문은 조건식이 `True`일 때 실행된다.

```{python}
x = 10

if x > 5:
    print("x는 5보다 크다")  # 조건이 참이므로 실행됨
```

- `if` 다음에 조건식을 작성하며, 조건이 `True`일 경우 `:` 뒤의 코드 블록이 실행된다.
- `if`문에 속하는 코드 블록은 반드시 **들여쓰기**해야 한다.

#### if-else 문

`if`문 뒤에 `else`를 추가하면 조건이 거짓(`False`)일 때 실행할 코드를 지정할 수 있다.

```{python}
x = 3

if x > 5:
    print("x는 5보다 크다")
else:
    print("x는 5 이하이다")  # 조건이 False이므로 실행됨
```

- `if`의 조건이 `False`이면 `else` 블록의 코드가 실행된다.

#### if-elif-else 문

여러 개의 조건을 검사할 때 `elif`(else if)를 사용하여 **다중 조건문**을 만들 수 있다.

```{python}
x = 7

if x > 10:
    print("x는 10보다 크다")
elif x > 5:
    print("x는 5보다 크다")  # 이 조건이 True이므로 실행됨
else:
    print("x는 5 이하이다")
```

- `if` 조건이 `False`이면 `elif`의 조건을 검사한다.
- 첫 번째로 `True`인 `elif` 블록이 실행되며, 이후의 `elif`는 검사하지 않는다.
- 모든 조건이 `False`이면 `else` 블록이 실행된다.

#### 중첩 if문

`if`문 내부에 또 다른 `if`문을 포함하여 **조건을 중첩**할 수 있다.

```{python}
x = 15

if x > 10:
    print("x는 10보다 크다")
    if x > 20:
        print("x는 20보다 크다")
    else:
        print("x는 10보다 크지만 20 이하는 아니다")
```

- `if`문 안에 또 다른 `if`문을 넣을 수 있으며, **들여쓰기 수준**에 따라 실행이 결정된다.

#### 조건 표현식 (삼항 연산자)

`if-else`를 **한 줄**로 표현할 수도 있다.

```{python}
x = 10
result = "x는 5보다 크다" if x > 5 else "x는 5 이하이다"

print(result)  # 출력: x는 5보다 크다
```

- `조건식 if 참일 때 값 else 거짓일 때 값` 형태로 작성된다.

#### 여러 조건을 한 번에 검사하기

##### 논리 연산자 사용 (`and`, `or`, `not`)
조건문에서 `and`, `or`, `not`을 사용하여 **여러 개의 조건을 조합**할 수 있다.

```{python}
x = 8

# and 연산자: 두 조건이 모두 참이어야 실행
if x > 5 and x < 10:
    print("x는 5보다 크고 10보다 작다")

# or 연산자: 둘 중 하나만 참이면 실행
if x < 5 or x > 7:
    print("x는 5보다 작거나 7보다 크다")

# not 연산자: 조건을 반대로 변경
if not x == 5:
    print("x는 5가 아니다")
```

##### 비교 연산자 연속 사용
파이썬에서는 **비교 연산자를 연속해서 사용할 수 있다.**

```{python}
x = 7

if 5 < x < 10:  # 5 < x and x < 10 과 동일
    print("x는 5보다 크고 10보다 작다")
```

#### if문과 `in`, `not in` 사용

리스트, 튜플, 문자열, 딕셔너리 등에서 특정 요소가 존재하는지 확인할 때 `in`과 `not in`을 사용할 수 있다.

```{python}
fruits = ["apple", "banana", "cherry"]

if "banana" in fruits:
    print("바나나가 리스트에 포함되어 있다.")

if "grape" not in fruits:
    print("포도는 리스트에 포함되어 있지 않다.")
```

#### `is`와 `==`의 차이

- `==` 연산자는 **값이 같은지 비교**한다.
- `is` 연산자는 **객체(메모리 주소)가 같은지 비교**한다.

```{python}
a = [1, 2, 3]
b = [1, 2, 3]
c = a

print(a == b)  # True (값이 같음)
print(a is b)  # False (다른 객체)
print(a is c)  # True (같은 객체)
```

#### 실전 예제

##### 사용자 입력값 조건 처리
```python
age = int(input("나이를 입력하세요: "))

if age >= 18:
    print("성인입니다.")
elif age >= 13:
    print("청소년입니다.")
else:
    print("어린이입니다.")
```

##### 숫자 판별 (양수, 음수, 0)
```python
num = int(input("숫자를 입력하세요: "))

if num > 0:
    print("양수입니다.")
elif num < 0:
    print("음수입니다.")
else:
    print("0입니다.")
```

## 반복문

반복문(iteration)은 제어문중 하나로, 프로그램 소스 코드내에서 특정한 부분의 코드가 반복적으로 수행될 수 있도록 하는 구문이다. 대표적인 구문으로 for문과 while문이 있다.

### for문

`for` 문은 **반복 가능한(iterable) 객체(리스트, 튜플, 문자열, 딕셔너리, range 등)**의 요소를 **순차적으로 순회**하면서 실행되는 반복문이다.

| 사용 방식 | 예제 |
|----------|------|
| 리스트 순회 | `for x in [1, 2, 3]: print(x)` |
| `range()` 사용 | `for i in range(5): print(i)` |
| 문자열 순회 | `for char in "hello": print(char)` |
| 딕셔너리 순회 | `for key, value in dict.items(): print(key, value)` |
| `enumerate()` 사용 | `for i, v in enumerate(lst): print(i, v)` |
| `zip()` 사용 | `for x, y in zip(lst1, lst2): print(x, y)` |
| 중첩 반복문 | `for i in range(3): for j in range(2): print(i, j)` |

`for` 문을 활용하면 데이터를 **효율적으로 반복 처리**할 수 있다.

#### 기본 `for` 문

리스트의 각 요소를 하나씩 가져와서 변수에 할당한 후, 코드 블록을 실행한다.

```{python}
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)
```

- `for 변수 in iterable:` 형식으로 작성된다.
- `iterable`의 각 요소가 `변수`에 차례대로 할당되면서 반복 실행된다.

#### `range()` 함수와 함께 사용

`range()` 함수는 일정 범위의 숫자를 생성하며, `for` 문과 함께 자주 사용된다.

```{python}
for i in range(5):  # 0부터 4까지 반복
    print(i)
```

##### `range(start, end, step)` 사용
- `range(시작, 끝, 증가값)` 형식으로 사용하면 특정 범위에서 일정 간격으로 값을 생성할 수 있다.

```{python}
for i in range(1, 10, 2):  # 1부터 9까지 2씩 증가
    print(i)
```

##### 문자열 순회

문자열도 `for` 문을 사용하여 한 글자씩 순회할 수 있다.

```{python}
word = "Python"

for char in word:
    print(char)
```

#### 튜플 순회

튜플도 `for` 문을 사용하여 요소를 순회할 수 있다.

```{python}
numbers = (10, 20, 30)

for num in numbers:
    print(num)
```

#### 딕셔너리 순회

딕셔너리는 기본적으로 **키를 순회**하며, `keys()`, `values()`, `items()` 메서드를 활용하여 다양한 방식으로 순회할 수 있다.

##### 키(key) 순회
```{python}
person = {"name": "Alice", "age": 25, "city": "Seoul"}

for key in person:
    print(key)  # 키만 출력
```

###### 값(value) 순회
```{python}
for value in person.values():
    print(value)  # 값만 출력
```

##### 키-값(key-value) 쌍 순회
```{python}
for key, value in person.items():
    print(f"{key}: {value}")
```

#### `enumerate()`를 사용하여 인덱스와 함께 순회

`enumerate()` 함수는 반복 가능한 객체를 순회하면서 **인덱스와 요소를 함께 제공**한다.

```{python}
fruits = ["apple", "banana", "cherry"]

for index, fruit in enumerate(fruits):
    print(f"{index}: {fruit}")
```

#### `zip()`을 사용하여 여러 리스트 동시에 순회

`zip()` 함수는 여러 리스트를 묶어서 동시에 순회할 때 사용한다.

```{python}
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]

for name, age in zip(names, ages):
    print(f"{name}의 나이는 {age}살입니다.")
```

#### 중첩 `for` 문

`for` 문 안에 또 다른 `for` 문을 넣어서 **이중 반복문**을 만들 수 있다.

```{python}
for i in range(3):  # 0, 1, 2
    for j in range(2):  # 0, 1
        print(f"i={i}, j={j}")
```

#### 반복문 제어문 (`break`, `continue`, `pass`)

##### `break` 문
`break` 문은 반복문을 즉시 종료한다.

```{python}
for i in range(5):
    if i == 3:
        break  # 3이 되면 반복 종료
    print(i)
```

##### `continue` 문
`continue` 문은 현재 반복을 건너뛰고 다음 반복을 수행한다.

```{python}
for i in range(5):
    if i == 2:
        continue  # 2일 때 건너뛰기
    print(i)
```

##### `pass` 문
`pass` 문은 실행할 코드가 없을 때 사용하며, 문법적으로 오류가 발생하지 않도록 한다.

```{python}
for i in range(5):
    if i == 2:
        pass  # 아무 동작도 하지 않음
    else:
        print(i)
```

#### 반복문과 `else`

반복문에 `else`를 추가하면, **반복문이 정상적으로 끝났을 때** 실행된다. (`break`로 종료되면 실행되지 않음)

```{python}
for i in range(5):
    print(i)
else:
    print("반복이 끝났습니다.")  # 정상 종료되면 실행
```

```{python}
for i in range(5):
    if i == 3:
        break  # 반복 중단
    print(i)
else:
    print("반복이 끝났습니다.")  # 실행되지 않음
```

#### 리스트 내포 (List Comprehension)

`for` 문을 사용하여 **리스트를 간결하게 생성**할 수 있다.

```{python}
# 기존 방식
squares = []
for i in range(1, 6):
    squares.append(i * i)

print(squares)
```

```{python}
# 리스트 내포 방식
squares = [i * i for i in range(1, 6)]
print(squares)  
```


### while문

## 기타 제어문

### break

### continue

### pass