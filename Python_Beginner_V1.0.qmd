---
title: "파이썬 초급"
# author: "박연규"
format: 
  revealjs:
    smaller: true
    scrollable: true
    css: style.css 
    slideNumber: true
    width: 100%
title-slide-attributes: 
  data-background-image: python-logo.png
  data-background-size: 290px 82px
  data-background-position: 10px 10px
  data-background-color: "#1E415E"
---

# 프로그래밍 언어

## 언어

언어란?
: 인간이 의사소통을 위해 사용하는 체계적인 기호 및 규칙의 집합

![](images/language.png)

소통을 하려면?

## 인터프리터

![](images/xlator.png)

## 프로그래밍 언어

![](images/interpreter.png)

## 코딩

## 개발환경 구축

## 파이썬 설치

![https://www.python.org/downloads/](images/python.png)

## IDE 설치(PyCharm)

## IDE 설치(Visual Studio Code)

## IDE 설치(Jupyter Notebook)

## 주피터 노트북북 환경설정

### 크롬 브라우져 설정

### Home Dir 설정

## 주피터 노트북 사용법

## 패키지

## 가상환경

# 파이썬 입문

## 자료형

## 변수

## 연산자

## 함수

## 객체지향(클래스)

### 객체지향을 위한 구조

매써드, 함수, 기능 + 데이터, 변수, 속성

# 자료형

## 자료형

1 + 1

:   -   2
    -   "11"
    -   True

::: {.callout-note icon="false" title="자료형 종류"}
숫자, 문자열, 논리형(bool), 리스트, 튜플, 딕셔너리, 집합
:::

## 변수

## 숫자형

-   정수
-   실수
-   컴퓨터식 지수 표현 방식
-   진수(8진수, 16진수)

## 사칙연산

-   `+`, `-`, `*`, `/`, `//`, `%`, `**`

## 문자열

-   `""`, `''`
-   문장 내 따옴표
-   줄바꿈
-   이스케이프 코드

## 문자열 연산

## 문자열 인덱싱

## 문자열 슬라이싱

-   str\[이상:미만:간격\]
-   년월일 분류

## 문자열 포매팅

## 문자열 함수

-   len()
-   count()
-   find()
-   index()
-   join()
-   upper()/lower()
-   lstrip()/rstrip()/strip()
-   replace()
-   split()

## 리스트

-   인덱싱
-   슬라이싱
-   추가/수정/삭제
-   정렬, reverse
-   index()
-   append()/pop()

## 튜플

-   mutable: 리스트, 딕셔너리, 집합
-   immutable: 정수, 실수, 문자열, 튜플

## 딕셔너리

-   Json, key:value 형식

## 리스트 vs 딕셔너리

## 집합

특징

:   -   순서가 없다
    -   중복을 허용하지 않는다

## 논리형(Bool)

-   참(True), 거짓(False)

## 변수 심화

``` python
print(a)
print(id(a))
```

``` python
a = [1,2,3]
b = a
a[1] = 4
print(a)
print(b)

c = [1,2,3]
d = c[:]
c[1] = 4
print(c)
print(d)
```

# 제어문

## 조건문

### if

### 기본구조

### 형식

------------------------------------------------------------------------

### 비교연산자

------------------------------------------------------------------------

### 논리연산자

## 반복문

------------------------------------------------------------------------

### while

#### 기본구조

------------------------------------------------------------------------

#### while 문법

::: {.callout-note icon="false" title="문법"}
```         
while expression:
    statement(s)
```
:::

------------------------------------------------------------------------

### for

#### 기본구조

------------------------------------------------------------------------

#### 문법

::: {.callout-note icon="false" title="문법"}
```         
for var in iterable:

    # statements

    pass
```
:::

# 함수

## 함수 정의

## 함수 구조

```         
def 함수_이름(매개변수)
  <수행할 문장>
  <수행할 문장>
  ...
  
  return 반환값
```

## 함수 형태

## 변수 범위

# 입출력

## 화면 입력

-   input()

## 화면 출력

-   print()

## 파일 입출력

-   open()
    -   mode: `w`, `r`, `a`
-   경로
    -   작업경로
    -   상대경로
    -   절대경로
-   readline(), readlines()
-   close()

## 프로그램 입출력

-   명령어 인수1, 인수2, ...

# 클래스

## 클래스 개념

1.  **클래스 (붕어빵 틀)**
    -   클래스는 **설계도**입니다.\
    -   붕어빵 틀처럼, 특정 모양과 속성을 가진 붕어빵(객체)을 만들어내기 위한 청사진 역할을 합니다.\
    -   예를 들어, 붕어빵 틀은 "모양", "속 재료"와 같은 공통된 구조를 정의합니다.
2.  **객체 (붕어빵)**
    -   객체는 클래스(붕어빵 틀)를 기반으로 만들어진 **실체**입니다.\
    -   붕어빵 틀에서 찍어낸 각각의 붕어빵이 객체에 해당합니다.\
    -   각 붕어빵은 같은 틀에서 만들어졌지만, 속 재료(팥, 슈크림 등)가 다를 수 있습니다.

------------------------------------------------------------------------

### 속성과 메서드

-   **속성 (팥, 슈크림 등 재료)**
    -   객체가 가지는 **특성**입니다.\
    -   예를 들어, 붕어빵 속 재료(팥, 슈크림 등)는 객체의 속성입니다.
-   **메서드 (붕어빵을 굽는 행동)**
    -   클래스가 수행할 수 있는 **행동**입니다.\
    -   붕어빵을 굽거나, 붕어빵 속을 확인하는 행동은 메서드에 해당합니다.

------------------------------------------------------------------------

### 파이썬 코드로 설명

``` python
# 붕어빵 틀 (클래스)
class FishBread:
    def __init__(self, filling, size):  # 붕어빵 속성과 크기를 정의
        self.filling = filling  # 속 재료
        self.size = size        # 크기
    
    def describe(self):  # 붕어빵 설명 메서드
        return f"이 붕어빵은 {self.size} 크기의 {self.filling} 붕어빵입니다."

# 붕어빵 (객체) 만들기
bread1 = FishBread("팥", "작은")
bread2 = FishBread("슈크림", "큰")

# 붕어빵 정보 출력
print(bread1.describe())  # 출력: 이 붕어빵은 작은 크기의 팥 붕어빵입니다.
print(bread2.describe())  # 출력: 이 붕어빵은 큰 크기의 슈크림 붕어빵입니다.
```

------------------------------------------------------------------------

### 요약

-   **클래스**는 설계도(붕어빵 틀)입니다.
-   **객체**는 설계도에서 만들어진 실체(붕어빵)입니다.
-   **속성**은 붕어빵의 재료와 크기 같은 특성입니다.
-   **메서드**는 붕어빵을 굽거나 설명하는 행동입니다.

## 클래스 예제

-   계산기

## 생성자

## 클래스 상속

## 매서드 오버라이딩

## 클래스 변수

# 모듈과 패키지

## 모듈

import 모듈

모듈.내용

## 패키지

# 예외 처리

```         
try:
  #오류가 발생할 수 있는 구문
except Exception as e:
  # 오류 발생
else:
  # 오류 발생하지 않음
finally:
  # 무조건 마지막에 실행
```

## try-except

## try-finally

## try-else

# 내장 함수

## 주요 내장 함수

-   print()
-   del()
-   type() ...

# 표준 라이브러리

## 주요 표준 라이브러리

-   datetime
-   time ...

# 외부 라이브러리

-   pip install / uninstall
-   numpy, pandas
-   Faker
-   ...

# 코딩

# 실습

## 참고자료

1.  코드 시각화

-   https://pythontutor.com/c.html#mode=edit
-   https://jgirl.ddns.net/VisualCode/live.html#mode=edit

1.  점프 투 파이썬

-   https://wikidocs.net/book/1

1.  excalidraw

-   [공유 게시판](https://excalidraw.com/#room=277f8b80bb9b3ce40f27,3yR6zdKu2alFCrer7vPrLA)
