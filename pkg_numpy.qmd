---
title: NumPy
format: html
description: 파이썬에서 배열을 처리하기 위한 numpy 패키지 사용법을 알아본다.
keywords: python, numpy, np, arange, arrays
---

## **1. NumPy 개요**  

NumPy(Numerical Python)는 **대규모 다차원 배열과 행렬 연산을 효율적으로 수행하는 라이브러리**이다. 과학 계산, 데이터 분석, 머신러닝 등의 분야에서 널리 사용된다.  

---

### **NumPy란 무엇인가?**  

NumPy는 **대량의 숫자 데이터를 빠르고 효율적으로 처리하기 위해 개발된 라이브러리**이다. Python의 기본 리스트보다 **메모리 사용량이 적고, 연산 속도가 빠르며, 다양한 수학 연산을 지원**한다.  

NumPy는 다음과 같은 기능을 제공한다.  
- **다차원 배열 객체(`ndarray`)**  
  - 리스트와 유사하지만, **행렬처럼 연산이 가능하고 빠르다.**  
- **벡터화 연산 (Vectorized Operations)**  
  - 반복문 없이 **배열 단위의 연산을 수행**하여 속도를 향상한다.  
- **수학, 선형대수, 통계 함수 제공**  
  - `sum()`, `mean()`, `std()`, `dot()` 등  
- **다양한 데이터 파일 입출력 지원**  
  - `.csv`, `.txt`, `.npy` 등 파일을 쉽게 저장 및 로드 가능  

---

### **NumPy의 특징과 장점**  
NumPy는 Python의 기본 리스트보다 **빠르고 효율적**이며, 수학 및 과학 계산을 위한 다양한 기능을 제공한다.  

| 특징 | 설명 |
|------|------|
| **빠른 연산 속도** | 내부적으로 C언어로 구현되어 있어 **리스트보다 연산 속도가 훨씬 빠름** |
| **메모리 효율성** | 같은 데이터를 저장할 때 **리스트보다 적은 메모리를 사용** |
| **벡터 연산 지원** | 반복문 없이 **배열 단위로 연산이 가능** |
| **다차원 배열 처리** | 1차원, 2차원, N차원 배열을 쉽게 다룰 수 있음 |
| **다양한 수학/통계 함수 제공** | 행렬 연산, 난수 생성, 변환 함수 등 **수학 계산 기능 내장** |
| **외부 라이브러리와 연동** | Pandas, SciPy, Scikit-learn, TensorFlow 등과 호환 가능 |

---

### **왜 NumPy를 사용하는가? (리스트와의 차이점)**  
Python의 리스트와 NumPy 배열을 비교하면 NumPy의 장점이 더욱 명확해진다.  

#### **1) 메모리 사용량 비교**  
NumPy 배열은 같은 데이터를 저장할 때 **더 적은 메모리를 사용**한다.  
```{python}
import numpy as np
import sys

# 크기 5인 리스트와 NumPy 배열 생성
list_data = [1, 2, 3, 4, 5]
numpy_array = np.array(list_data)

# 메모리 크기 비교
print("리스트 메모리 크기:", sys.getsizeof(list_data) * len(list_data), "bytes")
print("NumPy 배열 메모리 크기:", numpy_array.nbytes, "bytes")
```

NumPy 배열은 **데이터 타입을 통일하여 메모리 사용량을 줄인다.**  

#### **2) 연산 속도 비교**  
NumPy는 **벡터 연산**을 지원하여 리스트보다 연산 속도가 빠르다.  
```{python}
import time

# 크기 100만의 리스트와 NumPy 배열 생성
size = 1_000_000
list1 = list(range(size))
list2 = list(range(size))
array1 = np.arange(size)
array2 = np.arange(size)

# 리스트 연산 속도 측정
start = time.time()
result_list = [x + y for x, y in zip(list1, list2)]
end = time.time()
print("리스트 연산 시간:", end - start)

# NumPy 배열 연산 속도 측정
start = time.time()
result_array = array1 + array2
end = time.time()
print("NumPy 연산 시간:", end - start)
```

**결과:** NumPy 배열 연산이 리스트보다 **수십 배 빠르게 실행**된다.  

#### **3) 편리한 수학 연산 지원**  
리스트는 기본적으로 **수학 연산을 직접 지원하지 않음**  
```{python}
#| error: true

list_a = [1, 2, 3, 4]
list_b = [5, 6, 7, 8]

# 리스트 연산 (에러 발생)
# print(list_a + 10)  # TypeError
```

반면 NumPy 배열은 **벡터 연산이 가능**  

```{python}
array_a = np.array(list_a)
print(array_a + 10)  # 배열의 모든 요소에 10을 더함
```

---

### **NumPy 설치 및 기본 사용법**  

#### **1) NumPy 설치**  

NumPy는 `pip`을 사용하여 설치할 수 있다.  

```sh
pip install numpy
```

설치 확인  

```{python}
import numpy as np
print(np.__version__)  # NumPy 버전 출력
```

#### **2) NumPy 기본 사용법** 

NumPy를 사용하려면 `numpy`를 **`np`로 줄여서** 불러오는 것이 일반적이다.  

```{python}
import numpy as np

# 1차원 배열 생성
arr = np.array([1, 2, 3, 4, 5])
print(arr)
print(type(arr))  # <class 'numpy.ndarray'>

# 배열의 속성 확인
print("배열 크기:", arr.shape)
print("배열 차원:", arr.ndim)
print("배열 데이터 타입:", arr.dtype)
```

NumPy 배열은 리스트와 달리 **배열 크기(`shape`), 차원(`ndim`), 데이터 타입(`dtype`)** 등의 속성을 가진다.  

---

## **2. NumPy 배열 생성**  
- `numpy.array()`를 이용한 배열 생성  
- 다양한 배열 생성 방법  
  - `np.zeros()`, `np.ones()`, `np.full()`, `np.eye()`  
  - `np.arange()`, `np.linspace()`  
  - 난수 배열 생성 (`np.random`)  
- 배열의 속성 (`shape`, `dtype`, `size`, `ndim`)  

---

## **3. 배열의 인덱싱과 슬라이싱**  
- 기본적인 인덱싱 (`1D`, `2D`, `3D` 배열)  
- 슬라이싱을 이용한 부분 배열 추출  
- 불리언 인덱싱과 조건 검색 (`arr[arr > 5]`)  
- 팬시 인덱싱 (`arr[[0, 2, 4]]`)  

---

## **4. NumPy의 주요 연산**  
- 기본적인 산술 연산 (`+, -, *, /, **, %`)  
- 브로드캐스팅 개념  
- 배열 간 연산 (`np.add`, `np.subtract`, `np.multiply`, `np.divide`)  
- 통계 연산 (`np.mean`, `np.sum`, `np.min`, `np.max`, `np.std`, `np.var`)  
- 행렬 연산 (`np.dot`, `np.matmul`, `np.linalg.inv`, `np.linalg.det`)  

---

## **5. 배열 변형 및 조작**  
- 배열의 형태 변경 (`reshape`, `ravel`, `flatten`)  
- 차원 변경 (`np.newaxis`, `squeeze`)  
- 배열 연결 (`np.concatenate`, `np.hstack`, `np.vstack`)  
- 배열 분할 (`np.split`, `np.hsplit`, `np.vsplit`)  
- 배열 정렬 (`np.sort`, `np.argsort`)  

---

## **6. NumPy 고급 기능**  
- 고급 인덱싱 (`np.where`, `np.take`, `np.put`)  
- 유니버설 함수 (`np.exp`, `np.log`, `np.sin`, `np.cos`)  
- 마스크 연산 (`np.ma.masked_array`)  
- 메모리 절약 기법 (`dtype` 변경, `astype`)  

---

## **7. 실전 예제 및 활용 사례**  
- NumPy를 활용한 간단한 데이터 분석  
- 이미지 데이터 처리 (PIL, OpenCV 연동)  
- CSV 파일 읽기 (`np.loadtxt`, `np.genfromtxt`)  
- Pandas와의 연동 (`pd.DataFrame(np.array)`)  

---

## 참고자료

---

**각주**
