[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 다루기",
    "section": "",
    "text": "들어가기",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#파이썬-소개",
    "href": "index.html#파이썬-소개",
    "title": "파이썬 다루기",
    "section": "1. 파이썬 소개",
    "text": "1. 파이썬 소개\n\n파이썬이란?\n\n파이썬의 특징과 장점\n\n설치 및 개발 환경 설정(VS Code, Jupyter Notebook)\n\n첫 번째 프로그램: “Hello, World!” 출력",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#기본-문법",
    "href": "index.html#기본-문법",
    "title": "파이썬 다루기",
    "section": "2. 기본 문법",
    "text": "2. 기본 문법\n\n변수와 데이터 타입(숫자, 문자열, 불리언)\n\n연산자(산술, 비교, 논리, 대입 연산자)\n\n주석 사용법",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#자료형과-자료-구조",
    "href": "index.html#자료형과-자료-구조",
    "title": "파이썬 다루기",
    "section": "3. 자료형과 자료 구조",
    "text": "3. 자료형과 자료 구조\n\n리스트(List)\n\n튜플(Tuple)\n\n딕셔너리(Dictionary)\n\n집합(Set)\n\n문자열(String) 다루기",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#제어문",
    "href": "index.html#제어문",
    "title": "파이썬 다루기",
    "section": "4. 제어문",
    "text": "4. 제어문\n\n조건문(if-elif-else)\n\n반복문(for, while)\n\n반복문 제어문(break, continue)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#함수와-모듈",
    "href": "index.html#함수와-모듈",
    "title": "파이썬 다루기",
    "section": "5. 함수와 모듈",
    "text": "5. 함수와 모듈\n\n함수 정의 및 호출\n\n매개변수와 반환값\n\n내장 함수 활용\n\n모듈과 패키지(import 사용법)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#파일-입출력",
    "href": "index.html#파일-입출력",
    "title": "파이썬 다루기",
    "section": "6. 파일 입출력",
    "text": "6. 파일 입출력\n\n파일 열기와 닫기(open, close)\n\n파일 읽기(read, readline, readlines)\n\n파일 쓰기(write)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#예외-처리",
    "href": "index.html#예외-처리",
    "title": "파이썬 다루기",
    "section": "7. 예외 처리",
    "text": "7. 예외 처리\n\n예외 발생과 처리(try-except)\n\n다양한 예외 종류",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#객체-지향-프로그래밍oop-기초",
    "href": "index.html#객체-지향-프로그래밍oop-기초",
    "title": "파이썬 다루기",
    "section": "8. 객체 지향 프로그래밍(OOP) 기초",
    "text": "8. 객체 지향 프로그래밍(OOP) 기초\n\n클래스와 객체 개념\n\n생성자(__init__)와 속성\n\n메서드 정의 및 호출",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#라이브러리-활용",
    "href": "index.html#라이브러리-활용",
    "title": "파이썬 다루기",
    "section": "9. 라이브러리 활용",
    "text": "9. 라이브러리 활용\n\n유용한 표준 라이브러리(os, datetime, random 등)\n\n데이터 분석 기초(pandas, numpy 간단 사용법)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#프로젝트-실습",
    "href": "index.html#프로젝트-실습",
    "title": "파이썬 다루기",
    "section": "10. 프로젝트 실습",
    "text": "10. 프로젝트 실습\n\n간단한 계산기 만들기\n\n파일 데이터를 읽고 가공하는 프로그램\n\n웹 크롤링 기초(BeautifulSoup 활용)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "10python.html",
    "href": "10python.html",
    "title": "파이썬 소개",
    "section": "",
    "text": "파이쎤 소개\n파이썬(Python)은 배우기 쉽고 강력한 기능을 갖춘 프로그래밍 언어이다. 문법이 간결하고 가독성이 높아 초보자부터 전문가까지 폭넓게 사용하고 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#파이쎤-소개",
    "href": "10python.html#파이쎤-소개",
    "title": "파이썬 소개",
    "section": "",
    "text": "파이썬의 특징\n\n쉬운 문법: 영어와 비슷한 구문 구조를 가지고 있어 처음 배우는 사람도 쉽게 익힐 수 있다.\n\n높은 생산성: 적은 코드로 강력한 기능을 구현할 수 있어 개발 속도가 빠르다.\n\n다양한 활용 분야: 웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다.\n\n강력한 커뮤니티: 많은 개발자가 사용하며 다양한 라이브러리와 자료가 제공된다.\n\n\n\n파이썬의 활용 분야\n\n웹 개발: Django, Flask와 같은 프레임워크를 활용하여 웹사이트와 API를 개발할 수 있다.\n\n데이터 분석 및 인공지능: pandas, NumPy, TensorFlow 등 라이브러리를 이용하여 데이터 처리와 머신러닝 모델을 만들 수 있다.\n\n자동화 및 스크립트: 반복 작업을 자동화하는 데 유용하며, 파일 처리 및 웹 스크래핑 등에 활용된다.\n\n게임 개발: Pygame과 같은 라이브러리를 이용하여 간단한 게임을 만들 수 있다.\n\n파이썬은 초보자도 쉽게 배울 수 있으면서도 강력한 기능을 제공하는 언어로, 프로그래밍을 처음 접하는 사람에게 추천할 만한 언어이다.\n\n\n파이썬의 장점과 단점\n파이썬은 쉽고 강력한 프로그래밍 언어지만, 다른 언어와 비교했을 때 장점과 단점이 존재한다. 아래 표를 통해 주요 특징을 정리한다.\n\n\n\n\n\n\n\n\n구분\n장점\n단점\n\n\n\n\n문법\n코드가 간결하고 가독성이 높아 초보자도 쉽게 배울 수 있다.\n동적 타이핑(dynamic typing)으로 인해 대규모 프로젝트에서 예상치 못한 오류가 발생할 수 있다.\n\n\n속도\n인터프리터 언어로 개발 속도가 빠르고 유지보수가 용이하다.\n컴파일 언어(C, C++)보다 실행 속도가 느리다.\n\n\n확장성\n다양한 라이브러리와 프레임워크가 제공되어 다양한 분야에서 활용 가능하다.\n모바일 앱 개발에 적합한 프레임워크와 지원이 부족하다.\n\n\n다중 패러다임\n객체 지향, 절차적, 함수형 프로그래밍을 모두 지원한다.\n다중 스레드 성능이 GIL(Global Interpreter Lock)으로 인해 제한된다.\n\n\n활용 분야\n웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다.\n실시간 시스템, 임베디드 시스템과 같은 성능이 중요한 환경에서는 부적절할 수 있다.\n\n\n\n파이썬은 배우기 쉽고 다양한 활용이 가능하다는 점에서 강력한 언어지만, 실행 속도나 멀티스레딩 제한과 같은 단점도 존재한다. 따라서 사용 목적에 따라 적절한 언어를 선택하는 것이 중요하다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#파이썬-설치",
    "href": "10python.html#파이썬-설치",
    "title": "파이썬 소개",
    "section": "파이썬 설치",
    "text": "파이썬 설치\n파이썬을 설치하는 방법은 운영 체제에 따라 다를 수 있지만, 일반적으로 공식 웹사이트에서 설치 파일을 다운로드하여 설치하는 방식이 가장 쉽다.\n\n1. 파이썬 다운로드\n\n파이썬 공식 웹사이트에 접속한다.\n\n상단 메뉴에서 Downloads를 클릭한 후, 사용 중인 운영 체제(Windows, macOS, Linux)에 맞는 최신 버전의 파이썬을 다운로드한다.\n\n\n\n2. Windows에서 설치\n\n다운로드한 python-버전번호.exe 파일을 실행한다.\n\n“Add Python to PATH” 옵션을 체크한 후 “Install Now” 버튼을 클릭한다.\n\n설치가 완료되면 “Close” 버튼을 클릭한다.\n\n\n\n3. macOS에서 설치\n\n다운로드한 python-버전번호.pkg 파일을 실행한다.\n\n설치 마법사의 안내에 따라 진행한다.\n\n설치가 완료되면 터미널을 열어 아래 명령어를 실행하여 설치를 확인한다.\nsh     python3 --version\n\n\n\n4. Linux에서 설치 (Ubuntu 기준)\n\n터미널을 열고 다음 명령어를 실행한다.\nsh     sudo apt update     sudo apt install python3\n설치가 완료되면 아래 명령어로 버전을 확인한다.\nsh     python3 --version\n\n\n\n5. 설치 확인\n\n터미널(또는 명령 프롬프트, PowerShell)을 열고 아래 명령어를 입력한다.\nsh     python --version\n설치된 파이썬 버전이 출력되면 정상적으로 설치된 것이다.\n\n설치 후에는 IDLE, VS Code, Jupyter Notebook 등의 개발 환경을 설정하여 코딩을 시작할 수 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#개발-환경-설정",
    "href": "10python.html#개발-환경-설정",
    "title": "파이썬 소개",
    "section": "개발 환경 설정",
    "text": "개발 환경 설정\n\nVS Code\n\n\nJupyter Notebook",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#첫-번째-프로그램",
    "href": "10python.html#첫-번째-프로그램",
    "title": "파이썬 소개",
    "section": "첫 번째 프로그램",
    "text": "첫 번째 프로그램\n\nprint(\"Hello World\")\n\nHello World",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#참고자료",
    "href": "10python.html#참고자료",
    "title": "파이썬 소개",
    "section": "참고자료",
    "text": "참고자료\n\nIDLE\n\n\n\nIDLE(Integrated Development and Learning Environment)은 파이썬에 기본적으로 포함된 통합 개발 환경(IDE)으로, 초보자가 쉽게 파이썬을 실행하고 학습할 수 있도록 설계된 프로그램이다.\n\nIDLE의 특징\n\n기본 제공: 파이썬을 설치하면 자동으로 포함되므로 별도의 설치가 필요하지 않다.\n\nGUI 환경: 코드 편집기와 실행 창을 제공하여 사용자가 쉽게 코드를 작성하고 실행할 수 있다.\n\n대화형 인터프리터: 즉시 코드를 실행하고 결과를 확인할 수 있는 인터랙티브 셸을 제공한다.\n\n문법 강조: 코드 편집 시 색상을 적용하여 가독성을 높여준다.\n\n디버깅 기능: 간단한 디버깅 도구를 제공하여 오류를 찾고 수정할 수 있다.\n\n\n\nIDLE 실행 방법\n\nWindows: 시작 메뉴 &gt; Python &gt; IDLE (Python 버전) 선택\n\nmacOS: 응용 프로그램 &gt; Python 폴더 &gt; IDLE 실행\n\nLinux: 터미널에서 idle3 명령어 입력\n\n\n\nIDLE 사용 방법\n\n대화형 셸(Interactive Shell):\n실행 후 나타나는 창에서 바로 파이썬 코드를 입력하고 실행할 수 있다.\npython     &gt;&gt;&gt; print(\"Hello, Python!\")     Hello, Python!\n스크립트 작성 및 실행:\nFile &gt; New File을 선택하여 새 파일을 만들고 코드를 작성한 후, F5 키를 눌러 실행할 수 있다.\n\n\n\nIDLE의 장점과 단점\n\n\n\n\n\n\n\n\n구분\n장점\n단점\n\n\n\n\n사용 편의성\n별도 설치 없이 바로 사용 가능하다.\n기능이 제한적이어서 대형 프로젝트에는 부적합하다.\n\n\n학습 도구\n초보자가 배우기에 적합한 환경을 제공한다.\n자동 완성 기능이 부족하여 코드 작성 시 불편할 수 있다.\n\n\n인터랙티브 실행\n코드 실행 결과를 즉시 확인할 수 있다.\n여러 파일을 관리하는 데 비효율적이다.\n\n\n\nIDLE은 파이썬을 처음 배우는 사람에게 적합한 개발 환경이며, 간단한 코드 실습이나 테스트를 할 때 유용하다. 하지만 규모가 큰 프로젝트를 진행할 경우 VS Code, PyCharm 같은 다른 개발 도구를 사용하는 것이 더 효율적이다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  }
]