[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 다루기",
    "section": "",
    "text": "들어가기",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#파이썬-소개",
    "href": "index.html#파이썬-소개",
    "title": "파이썬 다루기",
    "section": "1. 파이썬 소개",
    "text": "1. 파이썬 소개\n\n파이썬이란?\n\n파이썬의 특징과 장점\n\n설치 및 개발 환경 설정(VS Code, Jupyter Notebook)\n\n첫 번째 프로그램: “Hello, World!” 출력",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#기본-문법",
    "href": "index.html#기본-문법",
    "title": "파이썬 다루기",
    "section": "2. 기본 문법",
    "text": "2. 기본 문법\n\n변수와 데이터 타입(숫자, 문자열, 불리언)\n\n연산자(산술, 비교, 논리, 대입 연산자)\n\n주석 사용법",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#자료형과-자료-구조",
    "href": "index.html#자료형과-자료-구조",
    "title": "파이썬 다루기",
    "section": "3. 자료형과 자료 구조",
    "text": "3. 자료형과 자료 구조\n\n리스트(List)\n\n튜플(Tuple)\n\n딕셔너리(Dictionary)\n\n집합(Set)\n\n문자열(String) 다루기",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#제어문",
    "href": "index.html#제어문",
    "title": "파이썬 다루기",
    "section": "4. 제어문",
    "text": "4. 제어문\n\n조건문(if-elif-else)\n\n반복문(for, while)\n\n반복문 제어문(break, continue)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#함수와-모듈",
    "href": "index.html#함수와-모듈",
    "title": "파이썬 다루기",
    "section": "5. 함수와 모듈",
    "text": "5. 함수와 모듈\n\n함수 정의 및 호출\n\n매개변수와 반환값\n\n내장 함수 활용\n\n모듈과 패키지(import 사용법)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#파일-입출력",
    "href": "index.html#파일-입출력",
    "title": "파이썬 다루기",
    "section": "6. 파일 입출력",
    "text": "6. 파일 입출력\n\n파일 열기와 닫기(open, close)\n\n파일 읽기(read, readline, readlines)\n\n파일 쓰기(write)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#예외-처리",
    "href": "index.html#예외-처리",
    "title": "파이썬 다루기",
    "section": "7. 예외 처리",
    "text": "7. 예외 처리\n\n예외 발생과 처리(try-except)\n\n다양한 예외 종류",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#객체-지향-프로그래밍oop-기초",
    "href": "index.html#객체-지향-프로그래밍oop-기초",
    "title": "파이썬 다루기",
    "section": "8. 객체 지향 프로그래밍(OOP) 기초",
    "text": "8. 객체 지향 프로그래밍(OOP) 기초\n\n클래스와 객체 개념\n\n생성자(__init__)와 속성\n\n메서드 정의 및 호출",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#라이브러리-활용",
    "href": "index.html#라이브러리-활용",
    "title": "파이썬 다루기",
    "section": "9. 라이브러리 활용",
    "text": "9. 라이브러리 활용\n\n유용한 표준 라이브러리(os, datetime, random 등)\n\n데이터 분석 기초(pandas, numpy 간단 사용법)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "index.html#프로젝트-실습",
    "href": "index.html#프로젝트-실습",
    "title": "파이썬 다루기",
    "section": "10. 프로젝트 실습",
    "text": "10. 프로젝트 실습\n\n간단한 계산기 만들기\n\n파일 데이터를 읽고 가공하는 프로그램\n\n웹 크롤링 기초(BeautifulSoup 활용)",
    "crumbs": [
      "들어가기"
    ]
  },
  {
    "objectID": "10python.html",
    "href": "10python.html",
    "title": "파이썬 소개",
    "section": "",
    "text": "파이쎤 소개\n파이썬(Python)은 배우기 쉽고 강력한 기능을 갖춘 프로그래밍 언어이다. 문법이 간결하고 가독성이 높아 초보자부터 전문가까지 폭넓게 사용하고 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#파이쎤-소개",
    "href": "10python.html#파이쎤-소개",
    "title": "파이썬 소개",
    "section": "",
    "text": "python\n\n\n\n\n\n파이썬의 특징\n\n쉬운 문법: 영어와 비슷한 구문 구조를 가지고 있어 처음 배우는 사람도 쉽게 익힐 수 있다.\n\n높은 생산성: 적은 코드로 강력한 기능을 구현할 수 있어 개발 속도가 빠르다.\n\n다양한 활용 분야: 웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다.\n\n강력한 커뮤니티: 많은 개발자가 사용하며 다양한 라이브러리와 자료가 제공된다.\n\n\n\n파이썬의 활용 분야\n\n웹 개발: Django, Flask와 같은 프레임워크를 활용하여 웹사이트와 API를 개발할 수 있다.\n\n데이터 분석 및 인공지능: pandas, NumPy, TensorFlow 등 라이브러리를 이용하여 데이터 처리와 머신러닝 모델을 만들 수 있다.\n\n자동화 및 스크립트: 반복 작업을 자동화하는 데 유용하며, 파일 처리 및 웹 스크래핑 등에 활용된다.\n\n게임 개발: Pygame과 같은 라이브러리를 이용하여 간단한 게임을 만들 수 있다.\n\n파이썬은 초보자도 쉽게 배울 수 있으면서도 강력한 기능을 제공하는 언어로, 프로그래밍을 처음 접하는 사람에게 추천할 만한 언어이다.\n\n\n파이썬의 장점과 단점\n파이썬은 쉽고 강력한 프로그래밍 언어지만, 다른 언어와 비교했을 때 장점과 단점이 존재한다. 아래 표를 통해 주요 특징을 정리한다.\n\n\n\n\n\n\n\n\n구분\n장점\n단점\n\n\n\n\n문법\n코드가 간결하고 가독성이 높아 초보자도 쉽게 배울 수 있다.\n동적 타이핑(dynamic typing)으로 인해 대규모 프로젝트에서 예상치 못한 오류가 발생할 수 있다.\n\n\n속도\n인터프리터 언어로 개발 속도가 빠르고 유지보수가 용이하다.\n컴파일 언어(C, C++)보다 실행 속도가 느리다.\n\n\n확장성\n다양한 라이브러리와 프레임워크가 제공되어 다양한 분야에서 활용 가능하다.\n모바일 앱 개발에 적합한 프레임워크와 지원이 부족하다.\n\n\n다중 패러다임\n객체 지향, 절차적, 함수형 프로그래밍을 모두 지원한다.\n다중 스레드 성능이 GIL(Global Interpreter Lock)으로 인해 제한된다.\n\n\n활용 분야\n웹 개발, 데이터 분석, 인공지능, 자동화 등 다양한 분야에서 사용된다.\n실시간 시스템, 임베디드 시스템과 같은 성능이 중요한 환경에서는 부적절할 수 있다.\n\n\n\n파이썬은 배우기 쉽고 다양한 활용이 가능하다는 점에서 강력한 언어지만, 실행 속도나 멀티스레딩 제한과 같은 단점도 존재한다. 따라서 사용 목적에 따라 적절한 언어를 선택하는 것이 중요하다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#sec-install-python",
    "href": "10python.html#sec-install-python",
    "title": "파이썬 소개",
    "section": "파이썬 설치",
    "text": "파이썬 설치\n파이썬을 설치하는 방법은 운영 체제에 따라 다를 수 있지만, 일반적으로 공식 웹사이트에서 설치 파일을 다운로드하여 설치하는 방식이 가장 쉽다.\n\n파이썬 다운로드\n\n파이썬 공식 웹사이트에 접속한다.\n\n상단 메뉴에서 Downloads를 클릭한 후, 사용 중인 운영 체제(Windows, macOS, Linux)에 맞는 최신 버전의 파이썬을 다운로드한다.\n\n\n\nWindows에서 설치\n\n다운로드한 python-버전번호.exe 파일을 실행한다.\n\n“Add Python to PATH” 옵션을 체크한 후 “Install Now” 버튼을 클릭한다.\n\n설치가 완료되면 “Close” 버튼을 클릭한다.\n\n\n\nmacOS에서 설치\n\n다운로드한 python-버전번호.pkg 파일을 실행한다.\n\n설치 마법사의 안내에 따라 진행한다.\n\n설치가 완료되면 터미널을 열어 아래 명령어를 실행하여 설치를 확인한다.\n\n\n\nLinux(Ubuntu)에서 설치\n\n터미널을 열고 다음 명령어를 실행한다.\nsudo apt update\nsudo apt install python3\n\n\n\n설치 확인\n\n터미널(또는 명령 프롬프트, PowerShell)을 열고 아래 명령어를 입력한다.\npython --version\n설치된 파이썬 버전이 출력되면 정상적으로 설치된 것이다.\n\n설치 후에는 IDLE, VS Code, Jupyter Notebook 등의 개발 환경을 설정하여 코딩을 시작할 수 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#개발-환경-설정",
    "href": "10python.html#개발-환경-설정",
    "title": "파이썬 소개",
    "section": "개발 환경 설정",
    "text": "개발 환경 설정\n\nVS Code\nVS Code(Visual Studio Code)는 마이크로소프트에서 제공하는 무료 코드 편집기로, 파이썬 개발 환경으로 많이 사용된다. 가벼우면서도 확장성이 뛰어나 초보자부터 전문가까지 널리 활용된다.\n\n\n\n\nVisual Studio Code\n\n\n\n\nVS Code 다운로드\n\nVS Code 공식 웹사이트에 접속한다.\n\n사용 중인 운영 체제(Windows, macOS, Linux)에 맞는 설치 파일을 다운로드한다.\n\n\n\nWindows에서 설치\n\n다운로드한 VSCodeUserSetup.exe 파일을 실행한다.\n\n설치 마법사가 실행되면 “Next”를 눌러 진행한다.\n\n설치 옵션에서 “Add to PATH” 항목을 체크한다.\n\n“Install” 버튼을 클릭하여 설치를 완료한 후, “Finish”를 눌러 실행한다.\n\n\n\nmacOS에서 설치\n\n다운로드한 VSCode-darwin.zip 파일을 압축 해제한다.\n\nVisual Studio Code.app을 응용 프로그램(Applications) 폴더로 이동한다.\n\n터미널에서 VS Code를 쉽게 실행하려면 아래 명령어를 입력하여 code 명령어를 등록한다.\nsudo ln -s /Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code /usr/local/bin/code\n\n\n\nLinux(Ubuntu)에서 설치\n\n터미널을 열고 다음 명령어를 실행하여 설치한다.\nsudo apt update\nsudo apt install code\n설치가 완료되면 아래 명령어를 입력하여 실행한다.\ncode\n\n\n\nVS Code에서 파이썬 개발 환경 설정\n\n1) 파이썬 확장 프로그램 설치\n\nVS Code를 실행하고 확장(Extensions) 메뉴(Ctrl + Shift + X)를 연다.\n\n검색창에 “Python”을 입력하고 Microsoft 제공 Python 확장 프로그램을 설치한다.\n\n\n\n2) 기본 인터프리터 설정\n\nCtrl + Shift + P를 눌러 명령 팔레트(Command Palette)를 연다.\n\n“Python: Select Interpreter”를 선택한 후 설치된 파이썬 경로를 선택한다.\n\n터미널에서 python --version을 실행하여 정상적으로 설정되었는지 확인한다.\n\n\n\n3) 실행 및 디버깅\n\n.py 파일을 만들고 파이썬 코드를 작성한다.\n\nF5 키를 눌러 실행하고 결과를 확인한다.\n\n\n\n\n설치 확인\n\nVS Code에서 Ctrl + ` 키를 눌러 터미널을 연다.\n\n아래 명령어를 입력하여 파이썬이 정상적으로 동작하는지 확인한다.\npython --version\n\n설치가 완료되면 VS Code를 활용하여 편리하게 파이썬 프로그래밍을 진행할 수 있다. 자세한 사용법은 VS Code 튜토리얼을 참고한다.\n\nhttps://code.visualstudio.com/docs/getstarted/getting-started\n\n\n\n\nJupyter Notebook\nJupyter Notebook은 웹 기반의 대화형 개발 환경으로, 파이썬 코드 실행과 문서화를 동시에 할 수 있어 데이터 분석 및 머신러닝 작업에 많이 사용된다.\n\n\n\n\nhttps://jupyter-notebook.readthedocs.io/en/latest/\n\n\n\n\nJupyter Notebook 설치 전 준비\nJupyter Notebook을 사용하려면 먼저 파이썬이 설치되어 있어야 한다.\n\n아래 명령어를 실행하여 파이썬이 설치되어 있는지 확인한다.\npython --version\n설치되어 있지 않다면 파이썬 공식 사이트에서 설치한다(파이썬 설치 참고).\n\n\n\nJupyter Notebook 설치\n\n1) pip을 이용한 설치\n\n터미널(또는 명령 프롬프트)을 열고 아래 명령어를 입력한다.\npip install notebook\n설치가 완료되면 jupyter --version을 실행하여 정상적으로 설치되었는지 확인한다.\n\n\n\n2) Anaconda를 이용한 설치\n\nAnaconda 공식 사이트에서 설치 파일을 다운로드한다.\n\n설치 후, 터미널(또는 Anaconda Prompt)에서 아래 명령어를 입력한다.\nconda install jupyter\n설치가 완료되면 jupyter --version을 실행하여 확인한다.\n\n\n\n\nJupyter Notebook 실행\n\n터미널 또는 명령 프롬프트에서 아래 명령어를 입력한다.\njupyter notebook\n자동으로 웹 브라우저가 열리며 Jupyter Notebook 인터페이스가 실행된다.\n\n\n\n4. Jupyter Notebook 사용 방법\n\n1) 새 노트북 생성\n\nJupyter Notebook 실행 후, New &gt; Python 3을 클릭하여 새로운 노트북을 만든다.\n\n\n\n2) 코드 실행\n\n코드 셀에 파이썬 코드를 입력한 후, Shift + Enter를 눌러 실행한다.\nprint(\"Hello, Jupyter Notebook!\")\n\n\n\n3) 저장 및 종료\n\n파일 &gt; Save and Checkpoint를 선택하여 작업을 저장한다.\n\nJupyter Notebook을 종료하려면 터미널에서 Ctrl + C를 누르고 y를 입력한다.\n\n설치가 완료되면 Jupyter Notebook을 활용하여 데이터 분석, 머신러닝, 문서 작성 등을 편리하게 수행할 수 있다. 자세한 사용법은 Jupyter Notebook 튜토리얼을 참고한다.\n\nhttps://docs.jupyter.org/en/latest/start/index.html",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#첫-번째-프로그램",
    "href": "10python.html#첫-번째-프로그램",
    "title": "파이썬 소개",
    "section": "첫 번째 프로그램",
    "text": "첫 번째 프로그램\n\n\n\n\nHello, World1\n\n\n\n화면에 “Hello, World”를 출력하는 프로그램을 작성한다.2\n\nprint(\"Hello, World\")\n\nHello, World",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#참고자료",
    "href": "10python.html#참고자료",
    "title": "파이썬 소개",
    "section": "참고자료",
    "text": "참고자료\n\nIDLE\nIDLE(Integrated Development and Learning Environment)은 파이썬에 기본적으로 포함된 통합 개발 환경(IDE)으로, 초보자가 쉽게 파이썬을 실행하고 학습할 수 있도록 설계된 프로그램이다.\n\n\n\n\nIDLE\n\n\n\n\nIDLE의 특징\n\n기본 제공: 파이썬을 설치하면 자동으로 포함되므로 별도의 설치가 필요하지 않다.\n\nGUI 환경: 코드 편집기와 실행 창을 제공하여 사용자가 쉽게 코드를 작성하고 실행할 수 있다.\n\n대화형 인터프리터: 즉시 코드를 실행하고 결과를 확인할 수 있는 인터랙티브 셸을 제공한다.\n\n문법 강조: 코드 편집 시 색상을 적용하여 가독성을 높여준다.\n\n디버깅 기능: 간단한 디버깅 도구를 제공하여 오류를 찾고 수정할 수 있다.\n\n\n\nIDLE 실행 방법\n\nWindows: 시작 메뉴 &gt; Python &gt; IDLE (Python 버전) 선택\n\nmacOS: 응용 프로그램 &gt; Python 폴더 &gt; IDLE 실행\n\nLinux: 터미널에서 idle3 명령어 입력\n\n\n\nIDLE 사용 방법\n\n대화형 셸(Interactive Shell):\n실행 후 나타나는 창에서 바로 파이썬 코드를 입력하고 실행할 수 있다.\n&gt;&gt;&gt; print(\"Hello, Python!\")\nHello, Python!\n스크립트 작성 및 실행:\nFile &gt; New File을 선택하여 새 파일을 만들고 코드를 작성한 후, F5 키를 눌러 실행할 수 있다.\n\n\n\nIDLE의 장점과 단점\n\n\n\n\n\n\n\n\n구분\n장점\n단점\n\n\n\n\n사용 편의성\n별도 설치 없이 바로 사용 가능하다.\n기능이 제한적이어서 대형 프로젝트에는 부적합하다.\n\n\n학습 도구\n초보자가 배우기에 적합한 환경을 제공한다.\n자동 완성 기능이 부족하여 코드 작성 시 불편할 수 있다.\n\n\n인터랙티브 실행\n코드 실행 결과를 즉시 확인할 수 있다.\n여러 파일을 관리하는 데 비효율적이다.\n\n\n\nIDLE은 파이썬을 처음 배우는 사람에게 적합한 개발 환경이며, 간단한 코드 실습이나 테스트를 할 때 유용하다. 하지만 규모가 큰 프로젝트를 진행할 경우 VS Code, PyCharm 같은 다른 개발 도구를 사용하는 것이 더 효율적이다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "10python.html#footnotes",
    "href": "10python.html#footnotes",
    "title": "파이썬 소개",
    "section": "",
    "text": "https://geek-and-poke.com/geekandpoke/2011/2/11/a-geek-is-born.html↩︎\nhttps://namu.wiki/w/Hello%2C%20world%21↩︎",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>파이썬 소개</span>"
    ]
  },
  {
    "objectID": "20syntax.html",
    "href": "20syntax.html",
    "title": "문법",
    "section": "",
    "text": "변수와 상수\n변수, 상수, 리터럴은 프로그래밍에서 데이터를 저장하고 관리하는 개념이다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#변수와-상수",
    "href": "20syntax.html#변수와-상수",
    "title": "문법",
    "section": "",
    "text": "변수\n변수란 값을 변경할 수 있는 저장 공간을 말한다.\n\n프로그램에서 데이터를 저장하고 변경할 수 있는 공간\n\n특정한 값이 할당되며, 필요에 따라 변경할 수 있음\n\n선언 시 변수명을 사용하여 값을 저장하고 참조함\n\n\n\n상수\n상수란 값을 변경할 수 없는 저장 공간을 말한다.\n\n한 번 할당되면 변경할 수 없는 값\n\n프로그램이 실행되는 동안 값이 유지됨\n\n일반적으로 const, final 등의 키워드를 사용하여 선언함\n\n\n\n리터럴\n저장 공간에 실제 저장하는 값을 말한다.\n\n프로그램에서 직접 사용하는 고정된 값\n\n변수나 상수에 할당되는 실제 데이터 값\n\n숫자, 문자열, 불리언, 배열 등 다양한 형태가 있음\n\n아래는 파이썬 예제이다.\n# 변수\nx = 10  \ny = \"Hello\"\n\n# 상수 (Python에서는 관례적으로 대문자로 작성)\nPI = 3.14159  \n\n# 리터럴\nprint(100)       # 정수 리터럴\nprint(3.14)      # 실수 리터럴\nprint(\"Python\")  # 문자열 리터럴\n파이썬에서는 상수를 만드는 “const”와 같은 키워드를 제공하지 않는다. 관례적으로 상수인 경우 변수명을 대문자로 작성한다(개발자간 암묵적인 규칙).",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#sec-datatype",
    "href": "20syntax.html#sec-datatype",
    "title": "문법",
    "section": "자료형",
    "text": "자료형\n자료형은 데이터의 종류를 나타내는 것이다. 프로그래밍에서 데이터를 다룰 때, 컴퓨터가 그 데이터의 성격을 이해할 수 있도록 자료형을 사용한다.\n\n자료형의 역할\n\n데이터를 어떻게 저장하고 처리할지 결정한다.\n허용되는 연산을 정의한다.\n\n\n\n파이썬에서 주요 자료형\n\n숫자형 (Number)\n\n정수, 실수, 복소수를 포함한다.\n예: 10(정수), 3.14(실수)\n\n문자열 (String)\n\n문자나 단어를 묶어놓은 데이터.\n예: \"안녕하세요\", 'Python'\n\n불리언 (Boolean)\n\n참(True)과 거짓(False)만을 표현하는 자료형.\n예: True, False\n\n리스트 (List)\n\n여러 개의 값을 순서대로 저장하는 자료형.\n예: [1, 2, 3], [\"a\", \"b\", \"c\"]\n\n튜플 (Tuple)\n\n리스트와 비슷하지만, 값이 변경되지 않는다.\n예: (1, 2, 3)\n\n딕셔너리 (Dictionary)\n\n키(key)와 값(value)을 쌍으로 저장하는 자료형.\n예: {\"이름\": \"철수\", \"나이\": 20}\n\n집합 (Set)\n\n중복 없는 값을 저장하는 자료형.\n예: {1, 2, 3}\n\n\n\n\n자료형의 예제\n# 숫자형\nx = 10\ny = 3.14\n\n# 문자열\nname = \"Python\"\n\n# 논리값(불리언)\nis_valid = True\n\n# 리스트\nnumbers = [1, 2, 3]\n\n# 튜플\ncoordinates = (10, 20)\n\n# 딕셔너리\nperson = {\"name\": \"Alice\", \"age\": 25}\n\n# 집합\nunique_numbers = {1, 2, 3, 4}\n\n\n쉽게 기억하는 법\n\n숫자: 계산할 수 있는 데이터\n\n문자열: 글자나 단어를 표현\n\n리스트/튜플: 여러 개의 데이터를 하나로 묶기\n\n딕셔너리: “단어: 뜻”처럼 짝지어진 데이터\n\n불리언: 맞다/틀리다(True/False)로 답하는 데이터",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#sec-numeric",
    "href": "20syntax.html#sec-numeric",
    "title": "문법",
    "section": "숫자형",
    "text": "숫자형\n파이썬에서 숫자형 자료형은 숫자를 저장하고 연산할 수 있는 데이터 타입이다. 크게 정수형, 실수형, 복소수형으로 나뉜다.\n\n정수형 (Integer, int)\n\n소수점이 없는 정수 값을 저장하는 자료형\n\n크기의 제한 없이 매우 큰 정수도 표현 가능\n\n양수, 음수, 0을 포함\n\n예제\n\na = 10   # 양의 정수\nb = -5   # 음의 정수\nc = 0    # 0도 정수\nd = 999999999999999999999  # 매우 큰 정수도 가능\nprint(type(a))  # &lt;class 'int'&gt;\n\n&lt;class 'int'&gt;\n\n\n\n\n\n실수형 (Floating Point, float)\n\n소수점이 있는 숫자를 표현하는 자료형\n\n부동소수점(floating point) 방식으로 저장됨\n\n지수 표현(e 표기법)을 사용하여 매우 큰 숫자나 매우 작은 숫자도 표현 가능\n\n예제\n\nx = 3.14   # 일반적인 실수\ny = -2.71  # 음수 실수\nz = 1.2e3  # 1.2 × 10³ = 1200.0\nw = 5e-4   # 5 × 10⁻⁴ = 0.0005\nprint(type(x))  # &lt;class 'float'&gt;\n\n&lt;class 'float'&gt;\n\n\n\n\n\n복소수형 (Complex Number, complex)\n\n수학에서 사용하는 복소수를 표현하는 자료형\n\n실수부(real)와 허수부(imag)로 구성됨\n\n허수부는 j를 사용하여 표현\n\n예제\n\nnum1 = 3 + 4j  # 3 + 4i (수학에서의 허수 i를 j로 표현)\nnum2 = -2 - 5j\nprint(num1.real)  # 실수부: 3.0\nprint(num1.imag)  # 허수부: 4.0\nprint(type(num1)) # &lt;class 'complex'&gt;\n\n3.0\n4.0\n&lt;class 'complex'&gt;\n\n\n\n\n\n형 변환 (Type Conversion)\n\n숫자형 간 변환이 가능하며, int(), float(), complex()를 사용함\n\n예제\n\nprint(int(3.14))     # 3 (실수를 정수로 변환)\nprint(float(5))      # 5.0 (정수를 실수로 변환)\nprint(complex(2))    # (2+0j) (정수를 복소수로 변환)\n\n3\n5.0\n(2+0j)\n\n\n\n\n\n숫자형과 관련된 내장 함수\n\n\n\n\n\n\n\n\n함수\n설명\n예제\n\n\n\n\nabs(x)\n절댓값 반환\nabs(-5) → 5\n\n\nround(x, n)\n반올림 (소수점 n자리까지)\nround(3.14159, 2) → 3.14\n\n\npow(x, y)\nx의 y제곱 (거듭제곱)\npow(2, 3) → 8\n\n\ndivmod(x, y)\n(몫, 나머지) 튜플 반환\ndivmod(10, 3) → (3, 1)\n\n\n\n\nprint(abs(-7))        # 7\nprint(round(3.14159, 2)) # 3.14\nprint(pow(2, 3))      # 8\nprint(divmod(10, 3))  # (3, 1)\n\n7\n3.14\n8\n(3, 1)",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#sec-string",
    "href": "20syntax.html#sec-string",
    "title": "문법",
    "section": "문자형",
    "text": "문자형\n파이썬에서 문자열(String, str)은 문자들의 연속된 집합으로, 텍스트 데이터를 저장하는 자료형이다. 작은따옴표(')나 큰따옴표(\")로 감싸서 표현한다.\n\n문자열 생성\n\ntext1 = 'Hello'       # 작은따옴표 사용\ntext2 = \"Python\"      # 큰따옴표 사용\ntext3 = '''Hello'''   # 작은따옴표 세 개 사용\ntext4 = \"\"\"Python\"\"\"  # 큰따옴표 세 개 사용\n\nprint(type(text1))  # &lt;class 'str'&gt;\n\n&lt;class 'str'&gt;\n\n\n\n작은따옴표와 큰따옴표는 동일하게 작동한다.\n세 개의 따옴표(''' 또는 \"\"\")는 여러 줄 문자열을 만들 때 사용한다.\n\n\nmulti_line = \"\"\"이것은\n    여러 줄의\n문자열입니다.\"\"\"\nprint(multi_line)\n\n이것은\n    여러 줄의\n문자열입니다.\n\n\n\n\n문자열 인덱싱(Indexing)과 슬라이싱(Slicing)\n문자열은 인덱스를 사용하여 개별 문자에 접근할 수 있다. 인덱스는 0부터 시작하며, 음수 인덱스를 사용하면 뒤에서부터 접근 가능하다.\n\n인덱싱\n\ntext = \"Python\"\nprint(text[0])   # 'P'\nprint(text[-1])  # 'n' (뒤에서 첫 번째 문자)\n\nP\nn\n\n\n\n\n슬라이싱\n\ntext = \"Python\"\nprint(text[0:4])  # 'Pyth' (0부터 3까지)\nprint(text[:3])   # 'Pyt' (처음부터 2까지)\nprint(text[2:])   # 'thon' (2부터 끝까지)\nprint(text[-4:-1])# 'tho' (뒤에서 4번째부터 뒤에서 2번째까지)\nprint(text[::-1]) # 'nohtyP' (문자열 뒤집기)\n\nPyth\nPyt\nthon\ntho\nnohtyP\n\n\n\n\n\n문자열 연산\n파이썬의 문자열은 더하기(+)와 곱하기(*) 연산을 지원한다.\n\n\n\n연산자\n설명\n예제\n\n\n\n\n+\n문자열 연결\n'Hello' + 'World' → 'HelloWorld'\n\n\n*\n문자열 반복\n'Python' * 3 → 'PythonPythonPython'\n\n\n\n\na = \"Hello\"\nb = \"World\"\nprint(a + \" \" + b)  # \"Hello World\"\n\nc = \"Python\"\nprint(c * 3)  # \"PythonPythonPython\"\n\nHello World\nPythonPythonPython\n\n\n\n\n문자열 길이 확인\nlen() 함수를 사용하면 문자열의 길이를 확인할 수 있다.\n\ntext = \"Hello Python\"\nprint(len(text))  # 12\n\n12\n\n\n\n\n문자열 내장 함수\n문자열 조작을 위한 다양한 함수가 제공된다.\n\n\n\n\n\n\n\n\n함수\n설명\n예제\n\n\n\n\nupper()\n대문자로 변환\n\"hello\".upper() → \"HELLO\"\n\n\nlower()\n소문자로 변환\n\"PYTHON\".lower() → \"python\"\n\n\nstrip()\n공백 제거\n\" hello \".strip() → \"hello\"\n\n\nreplace(a, b)\n문자열 치환\n\"Hello\".replace(\"H\", \"J\") → \"Jello\"\n\n\nsplit(sep)\n문자열 분할\n\"a,b,c\".split(\",\") → ['a', 'b', 'c']\n\n\njoin(iterable)\n문자열 합치기\n\" \".join(['Hello', 'World']) → \"Hello World\"\n\n\nfind(sub)\n문자열 찾기 (인덱스 반환)\n\"Python\".find(\"y\") → 1\n\n\ncount(sub)\n특정 문자 개수 세기\n\"banana\".count(\"a\") → 3\n\n\nstartswith(sub)\n특정 문자열로 시작하는지 확인\n\"Python\".startswith(\"Py\") → True\n\n\nendswith(sub)\n특정 문자열로 끝나는지 확인\n\"Python\".endswith(\"on\") → True\n\n\n\n\ntext = \" hello python \"\nprint(text.upper())    # \" HELLO PYTHON \"\nprint(text.strip())    # \"hello python\"\nprint(text.replace(\"python\", \"world\"))  # \" hello world \"\nprint(\"apple,banana,grape\".split(\",\"))  # ['apple', 'banana', 'grape']\nprint(\"-\".join([\"2025\", \"01\", \"30\"]))   # \"2025-01-30\"\nprint(\"banana\".count(\"a\"))  # 3\n\n HELLO PYTHON \nhello python\n hello world \n['apple', 'banana', 'grape']\n2025-01-30\n3\n\n\n\n\n문자열 포맷팅 (Formatting)\n문자열 안에 변수를 삽입하는 방법으로 f-문자열, format(), % 기법이 있다.\n\nf-문자열 (Python 3.6 이상)\n\nname = \"Alice\"\nage = 25\nprint(f\"이름: {name}, 나이: {age}\")  # \"이름: Alice, 나이: 25\"\n\n이름: Alice, 나이: 25\n\n\n\n\nformat() 사용\n\nname = \"Alice\"\nage = 25\nprint(\"이름: {}, 나이: {}\".format(name, age))  # \"이름: Alice, 나이: 25\"\nprint(\"이름: {0}, 나이: {1}\".format(name, age))  # \"이름: Alice, 나이: 25\"\n\n이름: Alice, 나이: 25\n이름: Alice, 나이: 25\n\n\n\n\n% 기법 (옛날 방식)\n\nname = \"Alice\"\nage = 25\nprint(\"이름: %s, 나이: %d\" % (name, age))  # \"이름: Alice, 나이: 25\"\n\n이름: Alice, 나이: 25\n\n\n\n\n\n문자열 비교\n파이썬에서는 문자열을 사전 순서(ASCII 값 기준)로 비교한다.\n\n\n\n연산자\n설명\n예제\n\n\n\n\n==\n문자열이 같은지 비교\n\"apple\" == \"apple\" → True\n\n\n!=\n문자열이 다른지 비교\n\"apple\" != \"banana\" → True\n\n\n&lt;, &gt;\n사전순 비교\n\"apple\" &lt; \"banana\" → True\n\n\n\n\nprint(\"apple\" == \"apple\")  # True\nprint(\"apple\" != \"banana\") # True\nprint(\"apple\" &lt; \"banana\")  # True (사전순 비교)\nprint(\"Zebra\" &gt; \"apple\")   # False ('Z'의 ASCII 값이 'a'보다 작음)\n\nTrue\nTrue\nTrue\nFalse\n\n\n\n\n문자열을 숫자로 변환\nint(), float()를 사용하면 문자열을 숫자로 변환할 수 있다.\n\nnum_str = \"100\"\nprint(int(num_str) + 5)  # 105 (문자열 → 정수)\n\nfloat_str = \"3.14\"\nprint(float(float_str) * 2)  # 6.28 (문자열 → 실수)\n\n105\n6.28\n\n\n문자열 관련 내용을 정리하면 다음과 같다.\n\n\n\n\n\n\n\n\n개념\n설명\n예제\n\n\n\n\n문자열 생성\n작은따옴표 또는 큰따옴표 사용\n'Hello', \"Python\"\n\n\n인덱싱\n특정 문자 접근\n\"Python\"[0] → 'P'\n\n\n슬라이싱\n문자열 일부 가져오기\n\"Python\"[1:4] → 'yth'\n\n\n연산\n+ (연결), * (반복)\n\"Hello\" + \"World\", \"Hi\" * 3\n\n\n내장 함수\n문자열 조작\n\"hello\".upper(), \"text\".replace(\"t\", \"T\")\n\n\n포맷팅\n변수 포함\nf\"이름: {name}\", \"이름: {}\".format(name)\n\n\n비교\n문자열 비교\n\"apple\" &lt; \"banana\" → True\n\n\n\n파이썬의 문자열은 변경할 수 없는(Immutable) 객체이지만, 다양한 함수와 연산을 활용하여 쉽게 다룰 수 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#sec-boolean",
    "href": "20syntax.html#sec-boolean",
    "title": "문법",
    "section": "논리형",
    "text": "논리형\n파이썬에서 불리언(Boolean, bool) 자료형은 참(True)과 거짓(False)을 표현하는 데이터 타입이다.\n\n불리언 값과 생성\nTrue 또는 False 값을 가지며, 첫 글자는 반드시 대문자로 작성한다(true, false는 오류 발생) .\n\na = True\nb = False\nprint(type(a))  # &lt;class 'bool'&gt;\nprint(type(b))  # &lt;class 'bool'&gt;\n\n&lt;class 'bool'&gt;\n&lt;class 'bool'&gt;\n\n\n\n\n불리언 연산\n논리 연산자(and, or, not)를 사용하여 조합 가능하다.\n\n\n\n연산자\n설명\n예제\n\n\n\n\nand\n두 값이 모두 참이면 True\nTrue and True → True\n\n\nor\n하나라도 참이면 True\nTrue or False → True\n\n\nnot\n값을 반대로 변환\nnot True → False\n\n\n\n\nprint(True and False)  # False\nprint(True or False)   # True\nprint(not True)        # False\n\nFalse\nTrue\nFalse\n\n\n\n\n불리언과 숫자 변환\nTrue는 1, False는 0과 동일하게 동작한다. int()와 bool()을 사용하여 변환 가능하다.\n\nprint(int(True))   # 1\nprint(int(False))  # 0\nprint(bool(1))     # True\nprint(bool(0))     # False\n\n1\n0\nTrue\nFalse\n\n\n\n\nbool()을 사용한 참/거짓 판별\n아래 값들은 False로 간주된다.\n\n0\n0.0\n'' (빈 문자열)\nNone\n[] (빈 리스트)\n{} (빈 딕셔너리)\nset() (빈 집합)\n\n\nprint(bool(0))       # False\nprint(bool(0.0))     # False\nprint(bool(\"\"))      # False\nprint(bool([]))      # False\nprint(bool(None))    # False\nprint(bool(\"Python\"))  # True (문자가 있으면 True)\nprint(bool([1, 2, 3]))  # True (리스트에 요소가 있으면 True)\n\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\n\n불리언 자료형은 조건문 (if), 반복문 (while), 논리 연산 등에 널리 사용된다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#연산자",
    "href": "20syntax.html#연산자",
    "title": "문법",
    "section": "연산자",
    "text": "연산자\n파이썬에서는 산술, 비교, 논리, 대입 등과 같은 연산자를 제공한다.\n\n산술\n파이썬에서 산술 연산자는 숫자 값을 계산하는 연산자이다. 기본적인 사칙연산뿐만 아니라 나머지 연산, 거듭제곱 연산, 몫 연산도 제공한다.\n\n산술 연산자 종류\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\n+\n덧셈\n10 + 5\n15\n\n\n-\n뺄셈\n10 - 5\n5\n\n\n*\n곱셈\n10 * 5\n50\n\n\n/\n나눗셈 (소수점 포함)\n10 / 3\n3.3333\n\n\n//\n몫 연산 (정수 나눗셈)\n10 // 3\n3\n\n\n%\n나머지 연산\n10 % 3\n1\n\n\n**\n거듭제곱\n2 ** 3\n8\n\n\n\n\n\n덧셈(+)과 뺄셈(-)\n\na = 10\nb = 5\nprint(a + b)  # 15\nprint(a - b)  # 5\n\n15\n5\n\n\n\n\n곱셈(*)과 나눗셈(/)\n\nx = 10\ny = 3\nprint(x * y)  # 30\nprint(x / y)  # 3.3333333333333335 (소수 포함)\n\n30\n3.3333333333333335\n\n\n\nx = 10\ny = 0\nprint(x / y)  # ZeroDivisionError\n\n\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[24], line 3\n      1 x = 10\n      2 y = 0\n----&gt; 3 print(x / y)  # ZeroDivisionError\n\nZeroDivisionError: division by zero\n\n\n\n\n\n몫 연산(//)\n결과값이 정수로 반환된다(소수점 이하 버림).\n\nprint(10 // 3)  # 3\nprint(-10 // 3) # -4 (음수는 반올림이 아니라 내림)\n\n3\n-4\n\n\n\n\n나머지 연산(%)\n\nprint(10 % 3)  # 1\nprint(15 % 4)  # 3\n\n1\n3\n\n\n\n\n거듭제곱(**)\n\nprint(2 ** 3)  # 8 (2의 3제곱)\nprint(5 ** 2)  # 25 (5의 제곱)\nprint(9 ** 0.5) # 3.0 (제곱근)\n\n8\n25\n3.0\n\n\n\n\n\n산술 연산과 자료형\nint와 float이 함께 연산되면 결과는 float이 된다.\n\nprint(5 + 2.5)  # 7.5 (int + float = float)\nprint(10 / 2)   # 5.0 (나눗셈 결과는 항상 float)\n\n7.5\n5.0\n\n\n\n\n연산자 우선순위\n파이썬의 산술 연산자는 수학과 동일한 우선순위를 따른다. 우선순위가 높을수록 먼저 계산된다.\n\n\n\n연산자\n우선순위 (높음 → 낮음)\n\n\n\n\n**\n거듭제곱\n\n\n*, /, //, %\n곱셈, 나눗셈, 몫, 나머지\n\n\n+, -\n덧셈, 뺄셈\n\n\n\n\nprint(2 + 3 * 4)     # 14 (* 먼저 계산)\nprint((2 + 3) * 4)   # 20 (괄호 안 먼저 계산)\nprint(2 ** 3 * 4)    # 32 (** 먼저 계산)\n\n14\n20\n32\n\n\n우선 순위가 있는 연산시 혼동을 피하기 위해 괄로로 묶어 계산한다.\n\n\n\n비교\n파이썬에서 비교 연산자는 두 값을 비교하고 True 또는 False를 반환하는 연산자이다.\n\n비교 연산자 종류\n\n\n\n\n\n\n\n\n\n\n연산자\n의미\n설명\n예제\n결과\n\n\n\n\n==\n같음\n두 값이 같으면 True, 다르면 False\n5 == 5\nTrue\n\n\n!=\n다름\n두 값이 다르면 True, 같으면 False\n5 != 3\nTrue\n\n\n&lt;\n작음\n왼쪽 값이 오른쪽 값보다 작으면 True\n3 &lt; 5\nTrue\n\n\n&gt;\n큼\n왼쪽 값이 오른쪽 값보다 크면 True\n5 &gt; 3\nTrue\n\n\n&lt;=\n작거나 같음\n왼쪽 값이 오른쪽 값보다 작거나 같으면 True\n5 &lt;= 5\nTrue\n\n\n&gt;=\n크거나 같음\n왼쪽 값이 오른쪽 값보다 크거나 같으면 True\n5 &gt;= 3\nTrue\n\n\n\n\n\n== (같음)\n\n두 값이 같으면 True, 다르면 False를 반환한다.\n\n\n\nprint(5 == 5)  # True\nprint(5 == 3)  # False\n\nTrue\nFalse\n\n\n\n!= (다름)\n\n두 값이 다르면 True, 같으면 False를 반환한다.\n\n\n\nprint(5 != 3)  # True\nprint(5 != 5)  # False\n\nTrue\nFalse\n\n\n\n&lt; (작음)\n\n왼쪽 값이 오른쪽 값보다 작으면 True, 크거나 같으면 False를 반환한다.\n\n\n\nprint(3 &lt; 5)  # True\nprint(5 &lt; 5)  # False\n\nTrue\nFalse\n\n\n\n&gt; (큼)\n\n왼쪽 값이 오른쪽 값보다 크면 True, 작거나 같으면 False를 반환한다.\n\n\n\nprint(5 &gt; 3)  # True\nprint(5 &gt; 5)  # False\n\nTrue\nFalse\n\n\n\n&lt;= (작거나 같음)\n\n왼쪽 값이 오른쪽 값보다 작거나 같으면 True, 크면 False를 반환한다.\n\n\n\nprint(3 &lt;= 5)  # True\nprint(5 &lt;= 5)  # True\nprint(6 &lt;= 5)  # False\n\nTrue\nTrue\nFalse\n\n\n\n&gt;= (크거나 같음)\n\n왼쪽 값이 오른쪽 값보다 크거나 같으면 True, 작으면 False를 반환한다.\n\n\n\nprint(5 &gt;= 3)  # True\nprint(5 &gt;= 5)  # True\nprint(3 &gt;= 5)  # False\n\nTrue\nTrue\nFalse\n\n\n\n\n\n비교 연산자의 특징\n\n\n문자열 비교\n\n문자열도 비교 연산자로 비교할 수 있으며, 사전 순서(ASCII 코드 값) 에 따라 결과가 결정된다.\n\n\n\nprint(\"apple\" &lt; \"banana\")  # True (\"a\"가 \"b\"보다 앞에 있음)\nprint(\"abc\" &lt; \"abcd\")  # True (문자 수가 적은 것이 더 작음)\n\nTrue\nTrue\n\n\n\n논리값 비교\n\nTrue는 1, False는 0과 동등하게 취급된다.\n\n\n\nprint(True == 1)  # True\nprint(False == 0)  # True\nprint(True &gt; False)  # True (1 &gt; 0)\n\nTrue\nTrue\nTrue\n\n\n\n비교 연산자 연쇄 사용 (Chaining)\n\n여러 개의 비교 연산자를 연결하여 사용할 수 있다.\n\n\n\nx = 5\nprint(3 &lt; x &lt; 10)  # True (3 &lt; 5 and 5 &lt; 10)\nprint(3 &lt; x &gt; 2)  # True (3 &lt; 5 and 5 &gt; 2)\n\nTrue\nTrue\n\n\n\n비교 연산자는 조건문, 반복문, 필터링 등의 다양한 상황에서 활용된다.\n\n\n\n논리\n파이썬에서 논리 연산자는 여러 개의 조건을 결합하거나 부정할 때 사용한다. 논리 연산자는 and, or, not 세 가지가 있다.\n\n논리 연산자의 종류\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\nand\n둘 다 True일 때만 True, 하나라도 False이면 False\nTrue and True\nTrue\n\n\nor\n둘 중 하나라도 True이면 True\nTrue or False\nTrue\n\n\nnot\nTrue를 False로, False를 True로 변환\nnot True\nFalse\n\n\n\n\n\nand 연산자\n연산자 좌우항 둘 다 True여야 True이다.\n\nprint(True and True)   # True\nprint(True and False)  # False\nprint(False and True)  # False\nprint(False and False) # False\n\nTrue\nFalse\nFalse\nFalse\n\n\n\nx = 10\nprint(x &gt; 5 and x &lt; 20)  # True (둘 다 True)\nprint(x &gt; 5 and x &gt; 20)  # False (하나가 False)\n\nTrue\nFalse\n\n\n\n\nor 연산자\n연산자 좌우향 중 하나라도 True면 True이다.\n\nprint(True or True)   # True\nprint(True or False)  # True\nprint(False or True)  # True\nprint(False or False) # False\n\nTrue\nTrue\nTrue\nFalse\n\n\n\ny = 7\nprint(y &lt; 5 or y &gt; 6)   # True (하나가 True)\nprint(y &lt; 5 or y == 7)  # True (하나가 True)\nprint(y &lt; 5 or y &gt; 10)  # False (둘 다 False)\n\nTrue\nTrue\nFalse\n\n\n\n\nnot 연산자\n논리값을 반대로 바꿔준다. 즉, True → False, False → True로 반환한다.\n\nprint(not True)   # False\nprint(not False)  # True\n\nFalse\nTrue\n\n\n\na = 5\nprint(not (a &gt; 10))  # True (a &gt; 10이 False이므로 not을 적용하면 True)\n\nTrue\n\n\n\n\n논리 연산자와 비교 연산자 함께 사용\n논리 연산자는 비교 연산자(&gt;, &lt;, ==, != 등)와 함께 사용되어 조건문을 조합할 때 유용하다.\n\nage = 25\nprint(age &gt; 18 and age &lt; 30)  # True (두 조건이 모두 참)\nprint(age &lt; 18 or age &gt; 30)   # False (둘 다 거짓)\nprint(not age &gt; 18)           # False (age가 18보다 크므로 not을 적용하면 False)\n\nTrue\nFalse\nFalse\n\n\n\n\nand, or의 단축 평가 (Short-Circuit Evaluation)\n파이썬은 논리 연산을 수행할 때 불필요한 연산을 생략하는 단축 평가(short-circuit evaluation) 를 적용한다.\n\nand 연산자에서 단축 평가\n첫 번째 값이 False이면 결과가 무조건 False이므로 두 번째 값은 검사하지 않는다.\n\nprint(False and print(\"실행되지 않음\"))  # False만 출력됨\n\nFalse\n\n\n\n\nor 연산자에서 단축 평가\n첫 번째 값이 True이면 결과가 무조건 True이므로 두 번째 값은 검사하지 않는다.\n\nprint(True or print(\"실행되지 않음\"))  # True만 출력됨\n\nTrue\n\n\n\n\n\n논리 연산자와 숫자형 값\n파이썬에서 True는 1, False는 0과 동일하게 취급된다. 또한, 빈 값(0, None, '', [], {})은 False, 나머지는 True로 평가된다.\n\nprint(bool(0))    # False\nprint(bool(1))    # True\nprint(bool(\"\"))   # False\nprint(bool(\"Hi\")) # True\n\nFalse\nTrue\nFalse\nTrue\n\n\n\n\n논리 연산자의 반환값\n논리 연산자는 단순히 True나 False가 아니라 실제 값을 반환하기도 한다.\n\nand 연산자: 첫 번째 값이 True이면 두 번째 값을 반환\nprint(10 and 20)  # 20 (10이 True이므로 20 반환)\nprint(0 and 20)   # 0 (0이 False이므로 0 반환)\n\n\nor 연산자: 첫 번째 값이 True이면 그 값을 반환, False이면 두 번째 값을 반환**\nprint(10 or 20)  # 10 (첫 번째 값이 True이므로 그대로 반환)\nprint(0 or 20)   # 20 (첫 번째 값이 False이므로 두 번째 값 반환)\n논리 연산자를 정리하면 다음과 같다.\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\nand\n둘 다 True일 때 True\nTrue and False\nFalse\n\n\nor\n하나라도 True이면 True\nTrue or False\nTrue\n\n\nnot\nTrue ↔︎ False 변환\nnot True\nFalse\n\n\n\n논리 연산자는 조건문, 반복문, 복잡한 조건을 평가할 때 필수적으로 사용되며, 단축 평가와 값 반환 방식을 이해하면 더욱 효율적으로 활용할 수 있다.\n\n\n\n\n대입\n파이썬에서 대입 연산자(할당 연산자)는 변수에 값을 저장하거나 연산 후 결과를 변수에 저장하는 데 사용한다.\n\n\n대입 연산자의 종류\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\n=\n기본 대입 (값을 변수에 저장)\na = 10\na에 10 저장\n\n\n+=\n덧셈 후 대입\na += 5\na = a + 5\n\n\n-=\n뺄셈 후 대입\na -= 3\na = a - 3\n\n\n*=\n곱셈 후 대입\na *= 2\na = a * 2\n\n\n/=\n나눗셈 후 대입\na /= 4\na = a / 4\n\n\n//=\n몫 연산 후 대입\na //= 3\na = a // 3\n\n\n%=\n나머지 연산 후 대입\na %= 2\na = a % 2\n\n\n**=\n거듭제곱 후 대입\na **= 3\na = a ** 3\n\n\n\n\n\n기본 대입 연산자\n\n=\n\n\nx = 10\ny = 5\nprint(x)  # 10\nprint(y)  # 5\n\n10\n5\n\n\n\n\n복합 대입 연산자\n\n+=, -=, *=, /=, //=, %=, **=\n\n\na = 10\n\na += 5   # a = a + 5\nprint(a)  # 15\n\na -= 3   # a = a - 3\nprint(a)  # 12\n\na *= 2   # a = a * 2\nprint(a)  # 24\n\na /= 4   # a = a / 4\nprint(a)  # 6.0 (나눗셈 결과는 항상 float)\n\na //= 2  # a = a // 2\nprint(a)  # 3 (정수 나눗셈)\n\na %= 2   # a = a % 2\nprint(a)  # 1 (나머지 연산)\n\na **= 3  # a = a ** 3\nprint(a)  # 1 (1의 3제곱)\n\n15\n12\n24\n6.0\n3.0\n1.0\n1.0\n\n\n\n\n여러 개의 변수에 값 대입\n\n여러 변수에 한 번에 대입\n\nx = y = z = 100\nprint(x, y, z)  # 100 100 100\n\n100 100 100\n\n\n\n\n여러 변수에 각각 다른 값 대입 (튜플 형태)\n\na, b, c = 1, 2, 3\nprint(a, b, c)  # 1 2 3\n\n1 2 3\n\n\n\n\n\n변수 값 교환\n파이썬에서는 임시 변수 없이 두 변수의 값을 쉽게 교환할 수 있다.\n\na, b = 10, 20\na, b = b, a\nprint(a, b)  # 20 10\n\n20 10\n\n\n\n\n리스트에서 값을 대입하는 언패킹(unpacking)\n\nnumbers = [1, 2, 3]\nx, y, z = numbers\nprint(x, y, z)  # 1 2 3\n\n1 2 3\n\n\n대입 연산자는 값을 저장하고, 계산을 간단하게 만들며, 여러 변수에 값을 동시에 할당할 때 유용하다.\n\n\n\n기타 연산자\n파이썬에서는 산술 연산자, 비교 연산자, 논리 연산자, 대입 연산자 외에도 다양한 연산자가 있다. 대표적으로 비트 연산자, 멤버 연산자, 식별 연산자가 있다.\n\n비트 연산자 (Bitwise Operators)\n비트 연산자는 정수를 이진수(0과 1)로 변환하여 비트 단위로 연산할 때 사용한다.\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예제 (a = 5, b = 3)\n결과 (a = 5(101), b = 3(011))\n\n\n\n\n&\nAND (둘 다 1이면 1)\na & b\n1 (001)\n\n\n|\nOR (하나라도 1이면 1)\na | b\n7 (111)\n\n\n^\nXOR (다를 때 1)\na ^ b\n6 (110)\n\n\n~\nNOT (비트 반전, 1의 보수)\n~a\n-6 (음수 표현 방식)\n\n\n&lt;&lt;\n왼쪽 시프트 (비트 이동, 2^n 배 증가)\na &lt;&lt; 1\n10 (1010)\n\n\n&gt;&gt;\n오른쪽 시프트 (비트 이동, 2^n 배 감소)\na &gt;&gt; 1\n2 (10)\n\n\n\n\na = 5  # 101 (2진수)\nb = 3  # 011 (2진수)\n\nprint(a & b)  # 1  (001)\nprint(a | b)  # 7  (111)\nprint(a ^ b)  # 6  (110)\nprint(~a)     # -6 (음수 표현 방식)\nprint(a &lt;&lt; 1) # 10 (1010) → 2배 증가\nprint(a &gt;&gt; 1) # 2  (10)   → 2배 감소\n\n1\n7\n6\n-6\n10\n2\n\n\n\n\n멤버 연산자 (Membership Operators)\n멤버 연산자는 특정 값이 리스트, 튜플, 문자열 등에 포함되어 있는지 확인할 때 사용한다.\n\n\n\n\n\n\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\nin\n값이 포함되어 있으면 True\n'a' in 'apple'\nTrue\n\n\nnot in\n값이 포함되지 않으면 True\n'x' not in 'apple'\nTrue\n\n\n\n\ntext = \"hello\"\nprint('h' in text)     # True\nprint('z' not in text) # True\n\nnumbers = [1, 2, 3, 4]\nprint(3 in numbers)    # True\nprint(5 not in numbers) # True\n\nTrue\nTrue\nTrue\nTrue\n\n\n\n\n식별 연산자 (Identity Operators)\n식별 연산자는 두 변수가 같은 객체를 가리키는지 확인할 때 사용한다(==은 값 비교, is는 객체 비교).\n\n\n\n연산자\n설명\n예제\n결과\n\n\n\n\nis\n같은 객체이면 True\na is b\nTrue 또는 False\n\n\nis not\n다른 객체이면 True\na is not b\nTrue 또는 False\n\n\n\n\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]\n\nprint(a is b)   # True (같은 객체를 가리킴)\nprint(a is c)   # False (같은 값이지만 다른 객체)\nprint(a == c)   # True (값이 같음)\nprint(a is not c) # True (다른 객체)\n\nTrue\nFalse\nTrue\nTrue\n\n\n위 연산자들은 비트 연산, 데이터 포함 여부 검사, 객체 비교 등에 유용하게 사용된다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  },
  {
    "objectID": "20syntax.html#주석-사용법",
    "href": "20syntax.html#주석-사용법",
    "title": "문법",
    "section": "주석 사용법",
    "text": "주석 사용법\n파이썬에서 주석(Comment)은 코드에 대한 설명을 작성하는 부분으로, 프로그램 실행에는 영향을 주지 않는다. 코드 가독성을 높이고 유지보수를 쉽게 하기 위해 사용한다.\n\n\n\n\n\n\n\n\n주석 유형\n설명\n예제\n\n\n\n\n한 줄 주석\n#을 사용하여 작성\n# 변수 선언\n\n\n여러 줄 주석\n\"\"\" 또는 '''로 감싸서 작성\n\"\"\" 여러 줄 주석 \"\"\"\n\n\n여러 줄 # 주석\n여러 줄에 걸쳐 # 사용\n# 첫 번째 줄  # 두 번째 줄\n\n\n\n\n한 줄 주석\n한 줄 주석(Single-line Comment)은 # 기호를 사용하여 작성한다.\n\n# 변수 선언\nx = 10  # x에 10을 할당\nprint(x)  # x 값을 출력\n\n10\n\n\n\n# 뒤에 오는 내용은 주석 처리되어 실행되지 않는다.\n\n\n\n여러 줄 주석\n여러 줄 주석(Multi-line Comment)은 여러 줄을 한 번에 주석 처리할 때 사용하며, 보통 큰 설명을 추가할 때 사용한다.\n#### 여러 줄 주석 - \"\"\" 또는 ''' 사용\n\n\"\"\"\n이 코드는 사칙연산을 수행하는 코드입니다.\n각 연산 결과를 출력합니다.\n\"\"\"\na = 10\nb = 5\n\nprint(a + b)  # 덧셈\nprint(a - b)  # 뺄셈\n\n15\n5\n\n\n\n'''\n여러 줄 주석을 사용하여\n설명을 추가할 수 있습니다.\n'''\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\"\"\" 또는 '''로 감싸면 여러 줄을 주석 처리할 수 있다. 다만, \"\"\"와 '''는 문자열 리터럴로도 사용될 수 있으므로, 문서화 문자열(docstring)로 인식될 수 있다.\n\n\n여러 줄 주석 - 여러 개의 # 사용\n여러 줄을 주석 처리할 때, #을 각 줄마다 붙이는 방법도 있다.\n\n# 이 코드는 두 숫자를 더하는 코드입니다.\n# 결과를 출력합니다.\n\na = 10\nb = 20\nprint(a + b)  # 30 출력\n\n30\n\n\n#을 여러 줄에 걸쳐 사용하면 여러 줄을 주석 처리할 수 있다.\n\n\n\n주석 활용 예제\n\n디버깅할 때 특정 코드 실행 막기\n\nx = 10\ny = 20\n# print(x + y)  # 이 줄은 실행되지 않음\nprint(x * y)  # 200 출력\n\n200\n\n\n특정 줄을 실행하지 않도록 하여 코드를 테스트할 때 유용하게 사용할 수 있다.\n\n\n함수 설명(docstring)으로 활용\n함수의 설명을 추가할 때 \"\"\" 또는 '''를 사용하면 문서화 문자열(docstring)로 활용할 수 있다.\n\ndef add(a, b):\n    \"\"\"두 수를 더하는 함수\"\"\"\n    return a + b\n\nprint(add(3, 5))  # 8 출력\n\n8\n\n\nhelp(add)를 실행하면 함수의 설명이 출력된다.\n\n\n\n주석 작성 시 주의할 점\n\n필요한 부분만 주석을 작성해야 한다. (불필요한 주석은 오히려 가독성을 해친다.)\n\n일관된 스타일로 작성하는 것이 좋다. (주석 스타일을 팀과 맞추는 것이 중요하다.)\n\n주석은 항상 최신 상태로 유지해야 한다. (코드를 변경했을 때 주석도 함께 수정해야 한다.)\n\n파이썬 주석은 코드를 이해하기 쉽게 만들고, 디버깅할 때 유용하며, 문서화 목적으로도 활용할 수 있다.",
    "crumbs": [
      "파이썬 기초",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>문법</span>"
    ]
  }
]